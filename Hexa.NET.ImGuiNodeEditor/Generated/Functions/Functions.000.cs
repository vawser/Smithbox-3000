// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGuiNodeEditor
{
	public unsafe partial class ImGuiNodeEditor
	{
		/// <summary>
		/// ------------------------------------------------------------------------------<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCurrentEditorNative(EditorContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<EditorContext*, void>)funcTable[0])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[0])((nint)ctx);
			#endif
		}

		/// <summary>
		/// ------------------------------------------------------------------------------<br/>
		/// </summary>
		public static void SetCurrentEditor(EditorContextPtr ctx)
		{
			SetCurrentEditorNative(ctx);
		}

		/// <summary>
		/// ------------------------------------------------------------------------------<br/>
		/// </summary>
		public static void SetCurrentEditor(ref EditorContext ctx)
		{
			fixed (EditorContext* pctx = &ctx)
			{
				SetCurrentEditorNative((EditorContext*)pctx);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static EditorContext* GetCurrentEditorNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<EditorContext*>)funcTable[1])();
			#else
			return (EditorContext*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1])();
			#endif
		}

		public static EditorContextPtr GetCurrentEditor()
		{
			EditorContextPtr ret = GetCurrentEditorNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static EditorContext* CreateEditorNative(Config* config)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Config*, EditorContext*>)funcTable[2])(config);
			#else
			return (EditorContext*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[2])((nint)config);
			#endif
		}

		public static EditorContextPtr CreateEditor(ConfigPtr config)
		{
			EditorContextPtr ret = CreateEditorNative(config);
			return ret;
		}

		public static EditorContextPtr CreateEditor(ref Config config)
		{
			fixed (Config* pconfig = &config)
			{
				EditorContextPtr ret = CreateEditorNative((Config*)pconfig);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyEditorNative(EditorContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<EditorContext*, void>)funcTable[3])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[3])((nint)ctx);
			#endif
		}

		public static void DestroyEditor(EditorContextPtr ctx)
		{
			DestroyEditorNative(ctx);
		}

		public static void DestroyEditor(ref EditorContext ctx)
		{
			fixed (EditorContext* pctx = &ctx)
			{
				DestroyEditorNative((EditorContext*)pctx);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Config* GetConfigNative(EditorContext* ctx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<EditorContext*, Config*>)funcTable[4])(ctx);
			#else
			return (Config*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[4])((nint)ctx);
			#endif
		}

		public static ConfigPtr GetConfig(EditorContextPtr ctx)
		{
			ConfigPtr ret = GetConfigNative(ctx);
			return ret;
		}

		public static ConfigPtr GetConfig(ref EditorContext ctx)
		{
			fixed (EditorContext* pctx = &ctx)
			{
				ConfigPtr ret = GetConfigNative((EditorContext*)pctx);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Style* GetStyleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Style*>)funcTable[5])();
			#else
			return (Style*)((delegate* unmanaged[Cdecl]<nint>)funcTable[5])();
			#endif
		}

		public static Style* GetStyle()
		{
			Style* ret = GetStyleNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* GetStyleColorNameNative(StyleColor colorIndex)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<StyleColor, byte*>)funcTable[6])(colorIndex);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<StyleColor, nint>)funcTable[6])(colorIndex);
			#endif
		}

		public static byte* GetStyleColorName(StyleColor colorIndex)
		{
			byte* ret = GetStyleColorNameNative(colorIndex);
			return ret;
		}

		public static string GetStyleColorNameS(StyleColor colorIndex)
		{
			string ret = Utils.DecodeStringUTF8(GetStyleColorNameNative(colorIndex));
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushStyleColorNative(StyleColor colorIndex, Vector4* color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StyleColor, Vector4*, void>)funcTable[7])(colorIndex, color);
			#else
			((delegate* unmanaged[Cdecl]<StyleColor, nint, void>)funcTable[7])(colorIndex, (nint)color);
			#endif
		}

		public static void PushStyleColor(StyleColor colorIndex, Vector4* color)
		{
			PushStyleColorNative(colorIndex, color);
		}

		public static void PushStyleColor(StyleColor colorIndex, ref Vector4 color)
		{
			fixed (Vector4* pcolor = &color)
			{
				PushStyleColorNative(colorIndex, (Vector4*)pcolor);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopStyleColorNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[8])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[8])(count);
			#endif
		}

		public static void PopStyleColor(int count)
		{
			PopStyleColorNative(count);
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API void PushStyleVar(StyleVar varIndex, float value);<br/>
		/// IMGUI_NODE_EDITOR_API void PushStyleVar(StyleVar varIndex, const ImVec2<br/>
		/// &<br/>
		/// value);<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushStyleVarNative(StyleVar varIndex, Vector4* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<StyleVar, Vector4*, void>)funcTable[9])(varIndex, value);
			#else
			((delegate* unmanaged[Cdecl]<StyleVar, nint, void>)funcTable[9])(varIndex, (nint)value);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API void PushStyleVar(StyleVar varIndex, float value);<br/>
		/// IMGUI_NODE_EDITOR_API void PushStyleVar(StyleVar varIndex, const ImVec2<br/>
		/// &<br/>
		/// value);<br/>
		/// </summary>
		public static void PushStyleVar(StyleVar varIndex, Vector4* value)
		{
			PushStyleVarNative(varIndex, value);
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API void PushStyleVar(StyleVar varIndex, float value);<br/>
		/// IMGUI_NODE_EDITOR_API void PushStyleVar(StyleVar varIndex, const ImVec2<br/>
		/// &<br/>
		/// value);<br/>
		/// </summary>
		public static void PushStyleVar(StyleVar varIndex, ref Vector4 value)
		{
			fixed (Vector4* pvalue = &value)
			{
				PushStyleVarNative(varIndex, (Vector4*)pvalue);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopStyleVarNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[10])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[10])(count);
			#endif
		}

		public static void PopStyleVar(int count)
		{
			PopStyleVarNative(count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BeginNative(byte* id, Vector2* size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, Vector2*, void>)funcTable[11])(id, size);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[11])((nint)id, (nint)size);
			#endif
		}

		public static void Begin(byte* id, Vector2* size)
		{
			BeginNative(id, size);
		}

		public static void Begin(ref byte id, Vector2* size)
		{
			fixed (byte* pid = &id)
			{
				BeginNative((byte*)pid, size);
			}
		}

		public static void Begin(ReadOnlySpan<byte> id, Vector2* size)
		{
			fixed (byte* pid = id)
			{
				BeginNative((byte*)pid, size);
			}
		}

		public static void Begin(string id, Vector2* size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BeginNative(pStr0, size);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void Begin(byte* id, ref Vector2 size)
		{
			fixed (Vector2* psize = &size)
			{
				BeginNative(id, (Vector2*)psize);
			}
		}

		public static void Begin(ref byte id, ref Vector2 size)
		{
			fixed (byte* pid = &id)
			{
				fixed (Vector2* psize = &size)
				{
					BeginNative((byte*)pid, (Vector2*)psize);
				}
			}
		}

		public static void Begin(ReadOnlySpan<byte> id, ref Vector2 size)
		{
			fixed (byte* pid = id)
			{
				fixed (Vector2* psize = &size)
				{
					BeginNative((byte*)pid, (Vector2*)psize);
				}
			}
		}

		public static void Begin(string id, ref Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (id != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(id);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(id, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (Vector2* psize = &size)
			{
				BeginNative(pStr0, (Vector2*)psize);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[12])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[12])();
			#endif
		}

		public static void End()
		{
			EndNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BeginNodeNative(NodeId id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[13])(id);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[13])(id);
			#endif
		}

		public static void BeginNode(NodeId id)
		{
			BeginNodeNative(id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BeginPinNative(PinId id, PinKind kind)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<PinId, PinKind, void>)funcTable[14])(id, kind);
			#else
			((delegate* unmanaged[Cdecl]<PinId, PinKind, void>)funcTable[14])(id, kind);
			#endif
		}

		public static void BeginPin(PinId id, PinKind kind)
		{
			BeginPinNative(id, kind);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PinRectNative(Vector2* a, Vector2* b)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2*, void>)funcTable[15])(a, b);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[15])((nint)a, (nint)b);
			#endif
		}

		public static void PinRect(Vector2* a, Vector2* b)
		{
			PinRectNative(a, b);
		}

		public static void PinRect(ref Vector2 a, Vector2* b)
		{
			fixed (Vector2* pa = &a)
			{
				PinRectNative((Vector2*)pa, b);
			}
		}

		public static void PinRect(Vector2* a, ref Vector2 b)
		{
			fixed (Vector2* pb = &b)
			{
				PinRectNative(a, (Vector2*)pb);
			}
		}

		public static void PinRect(ref Vector2 a, ref Vector2 b)
		{
			fixed (Vector2* pa = &a)
			{
				fixed (Vector2* pb = &b)
				{
					PinRectNative((Vector2*)pa, (Vector2*)pb);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PinPivotRectNative(Vector2* a, Vector2* b)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, Vector2*, void>)funcTable[16])(a, b);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[16])((nint)a, (nint)b);
			#endif
		}

		public static void PinPivotRect(Vector2* a, Vector2* b)
		{
			PinPivotRectNative(a, b);
		}

		public static void PinPivotRect(ref Vector2 a, Vector2* b)
		{
			fixed (Vector2* pa = &a)
			{
				PinPivotRectNative((Vector2*)pa, b);
			}
		}

		public static void PinPivotRect(Vector2* a, ref Vector2 b)
		{
			fixed (Vector2* pb = &b)
			{
				PinPivotRectNative(a, (Vector2*)pb);
			}
		}

		public static void PinPivotRect(ref Vector2 a, ref Vector2 b)
		{
			fixed (Vector2* pa = &a)
			{
				fixed (Vector2* pb = &b)
				{
					PinPivotRectNative((Vector2*)pa, (Vector2*)pb);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PinPivotSizeNative(Vector2* size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)funcTable[17])(size);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[17])((nint)size);
			#endif
		}

		public static void PinPivotSize(Vector2* size)
		{
			PinPivotSizeNative(size);
		}

		public static void PinPivotSize(ref Vector2 size)
		{
			fixed (Vector2* psize = &size)
			{
				PinPivotSizeNative((Vector2*)psize);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PinPivotScaleNative(Vector2* scale)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)funcTable[18])(scale);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[18])((nint)scale);
			#endif
		}

		public static void PinPivotScale(Vector2* scale)
		{
			PinPivotScaleNative(scale);
		}

		public static void PinPivotScale(ref Vector2 scale)
		{
			fixed (Vector2* pscale = &scale)
			{
				PinPivotScaleNative((Vector2*)pscale);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PinPivotAlignmentNative(Vector2* alignment)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)funcTable[19])(alignment);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[19])((nint)alignment);
			#endif
		}

		public static void PinPivotAlignment(Vector2* alignment)
		{
			PinPivotAlignmentNative(alignment);
		}

		public static void PinPivotAlignment(ref Vector2 alignment)
		{
			fixed (Vector2* palignment = &alignment)
			{
				PinPivotAlignmentNative((Vector2*)palignment);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndPinNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[20])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[20])();
			#endif
		}

		public static void EndPin()
		{
			EndPinNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GroupNative(Vector2* size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector2*, void>)funcTable[21])(size);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[21])((nint)size);
			#endif
		}

		public static void Group(Vector2* size)
		{
			GroupNative(size);
		}

		public static void Group(ref Vector2 size)
		{
			fixed (Vector2* psize = &size)
			{
				GroupNative((Vector2*)psize);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndNodeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[22])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[22])();
			#endif
		}

		public static void EndNode()
		{
			EndNodeNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte BeginGroupHintNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, byte>)funcTable[23])(nodeId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<NodeId, byte>)funcTable[23])(nodeId);
			#endif
		}

		public static bool BeginGroupHint(NodeId nodeId)
		{
			byte ret = BeginGroupHintNative(nodeId);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 GetGroupMinNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2>)funcTable[24])();
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<Vector2>)funcTable[24])();
			#endif
		}

		public static Vector2 GetGroupMin()
		{
			Vector2 ret = GetGroupMinNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 GetGroupMaxNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2>)funcTable[25])();
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<Vector2>)funcTable[25])();
			#endif
		}

		public static Vector2 GetGroupMax()
		{
			Vector2 ret = GetGroupMaxNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImDrawList* GetHintForegroundDrawListNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawList*>)funcTable[26])();
			#else
			return (ImDrawList*)((delegate* unmanaged[Cdecl]<nint>)funcTable[26])();
			#endif
		}

		public static ImDrawList* GetHintForegroundDrawList()
		{
			ImDrawList* ret = GetHintForegroundDrawListNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImDrawList* GetHintBackgroundDrawListNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImDrawList*>)funcTable[27])();
			#else
			return (ImDrawList*)((delegate* unmanaged[Cdecl]<nint>)funcTable[27])();
			#endif
		}

		public static ImDrawList* GetHintBackgroundDrawList()
		{
			ImDrawList* ret = GetHintBackgroundDrawListNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndGroupHintNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[28])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[28])();
			#endif
		}

		public static void EndGroupHint()
		{
			EndGroupHintNative();
		}

		/// <summary>
		/// TODO: Add a way to manage node background channels<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImDrawList* GetNodeBackgroundDrawListNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, ImDrawList*>)funcTable[29])(nodeId);
			#else
			return (ImDrawList*)((delegate* unmanaged[Cdecl]<NodeId, nint>)funcTable[29])(nodeId);
			#endif
		}

		/// <summary>
		/// TODO: Add a way to manage node background channels<br/>
		/// </summary>
		public static ImDrawList* GetNodeBackgroundDrawList(NodeId nodeId)
		{
			ImDrawList* ret = GetNodeBackgroundDrawListNative(nodeId);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte LinkNative(LinkId id, PinId startPinId, PinId endPinId, Vector4* color, float thickness)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId, PinId, PinId, Vector4*, float, byte>)funcTable[30])(id, startPinId, endPinId, color, thickness);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<LinkId, PinId, PinId, nint, float, byte>)funcTable[30])(id, startPinId, endPinId, (nint)color, thickness);
			#endif
		}

		public static bool Link(LinkId id, PinId startPinId, PinId endPinId, Vector4* color, float thickness)
		{
			byte ret = LinkNative(id, startPinId, endPinId, color, thickness);
			return ret != 0;
		}

		public static bool Link(LinkId id, PinId startPinId, PinId endPinId, ref Vector4 color, float thickness)
		{
			fixed (Vector4* pcolor = &color)
			{
				byte ret = LinkNative(id, startPinId, endPinId, (Vector4*)pcolor, thickness);
				return ret != 0;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FlowNative(LinkId linkId, FlowDirection direction)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<LinkId, FlowDirection, void>)funcTable[31])(linkId, direction);
			#else
			((delegate* unmanaged[Cdecl]<LinkId, FlowDirection, void>)funcTable[31])(linkId, direction);
			#endif
		}

		public static void Flow(LinkId linkId, FlowDirection direction)
		{
			FlowNative(linkId, direction);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte BeginCreateNative(Vector4* color, float thickness)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4*, float, byte>)funcTable[32])(color, thickness);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, float, byte>)funcTable[32])((nint)color, thickness);
			#endif
		}

		public static bool BeginCreate(Vector4* color, float thickness)
		{
			byte ret = BeginCreateNative(color, thickness);
			return ret != 0;
		}

		public static bool BeginCreate(ref Vector4 color, float thickness)
		{
			fixed (Vector4* pcolor = &color)
			{
				byte ret = BeginCreateNative((Vector4*)pcolor, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte QueryNewLinkNative(PinId* startId, PinId* endId, Vector4* color, float thickness)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId*, PinId*, Vector4*, float, byte>)funcTable[33])(startId, endId, color, thickness);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, float, byte>)funcTable[33])((nint)startId, (nint)endId, (nint)color, thickness);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(PinId* startId, PinId* endId, Vector4* color, float thickness)
		{
			byte ret = QueryNewLinkNative(startId, endId, color, thickness);
			return ret != 0;
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(ref PinId startId, PinId* endId, Vector4* color, float thickness)
		{
			fixed (PinId* pstartId = &startId)
			{
				byte ret = QueryNewLinkNative((PinId*)pstartId, endId, color, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(PinId* startId, ref PinId endId, Vector4* color, float thickness)
		{
			fixed (PinId* pendId = &endId)
			{
				byte ret = QueryNewLinkNative(startId, (PinId*)pendId, color, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(ref PinId startId, ref PinId endId, Vector4* color, float thickness)
		{
			fixed (PinId* pstartId = &startId)
			{
				fixed (PinId* pendId = &endId)
				{
					byte ret = QueryNewLinkNative((PinId*)pstartId, (PinId*)pendId, color, thickness);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(PinId* startId, PinId* endId, ref Vector4 color, float thickness)
		{
			fixed (Vector4* pcolor = &color)
			{
				byte ret = QueryNewLinkNative(startId, endId, (Vector4*)pcolor, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(ref PinId startId, PinId* endId, ref Vector4 color, float thickness)
		{
			fixed (PinId* pstartId = &startId)
			{
				fixed (Vector4* pcolor = &color)
				{
					byte ret = QueryNewLinkNative((PinId*)pstartId, endId, (Vector4*)pcolor, thickness);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(PinId* startId, ref PinId endId, ref Vector4 color, float thickness)
		{
			fixed (PinId* pendId = &endId)
			{
				fixed (Vector4* pcolor = &color)
				{
					byte ret = QueryNewLinkNative(startId, (PinId*)pendId, (Vector4*)pcolor, thickness);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewLink(PinId* startId, PinId* endId);<br/>
		/// </summary>
		public static bool QueryNewLink(ref PinId startId, ref PinId endId, ref Vector4 color, float thickness)
		{
			fixed (PinId* pstartId = &startId)
			{
				fixed (PinId* pendId = &endId)
				{
					fixed (Vector4* pcolor = &color)
					{
						byte ret = QueryNewLinkNative((PinId*)pstartId, (PinId*)pendId, (Vector4*)pcolor, thickness);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewNode(PinId* pinId);<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte QueryNewNodeNative(PinId* pinId, Vector4* color, float thickness)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId*, Vector4*, float, byte>)funcTable[34])(pinId, color, thickness);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, float, byte>)funcTable[34])((nint)pinId, (nint)color, thickness);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewNode(PinId* pinId);<br/>
		/// </summary>
		public static bool QueryNewNode(PinId* pinId, Vector4* color, float thickness)
		{
			byte ret = QueryNewNodeNative(pinId, color, thickness);
			return ret != 0;
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewNode(PinId* pinId);<br/>
		/// </summary>
		public static bool QueryNewNode(ref PinId pinId, Vector4* color, float thickness)
		{
			fixed (PinId* ppinId = &pinId)
			{
				byte ret = QueryNewNodeNative((PinId*)ppinId, color, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewNode(PinId* pinId);<br/>
		/// </summary>
		public static bool QueryNewNode(PinId* pinId, ref Vector4 color, float thickness)
		{
			fixed (Vector4* pcolor = &color)
			{
				byte ret = QueryNewNodeNative(pinId, (Vector4*)pcolor, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool QueryNewNode(PinId* pinId);<br/>
		/// </summary>
		public static bool QueryNewNode(ref PinId pinId, ref Vector4 color, float thickness)
		{
			fixed (PinId* ppinId = &pinId)
			{
				fixed (Vector4* pcolor = &color)
				{
					byte ret = QueryNewNodeNative((PinId*)ppinId, (Vector4*)pcolor, thickness);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool AcceptNewItem();<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptNewItemNative(Vector4* color, float thickness)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector4*, float, byte>)funcTable[35])(color, thickness);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, float, byte>)funcTable[35])((nint)color, thickness);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool AcceptNewItem();<br/>
		/// </summary>
		public static bool AcceptNewItem(Vector4* color, float thickness)
		{
			byte ret = AcceptNewItemNative(color, thickness);
			return ret != 0;
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool AcceptNewItem();<br/>
		/// </summary>
		public static bool AcceptNewItem(ref Vector4 color, float thickness)
		{
			fixed (Vector4* pcolor = &color)
			{
				byte ret = AcceptNewItemNative((Vector4*)pcolor, thickness);
				return ret != 0;
			}
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API void RejectNewItem();<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RejectNewItemNative(Vector4* color, float thickness)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, float, void>)funcTable[36])(color, thickness);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)funcTable[36])((nint)color, thickness);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API void RejectNewItem();<br/>
		/// </summary>
		public static void RejectNewItem(Vector4* color, float thickness)
		{
			RejectNewItemNative(color, thickness);
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API void RejectNewItem();<br/>
		/// </summary>
		public static void RejectNewItem(ref Vector4 color, float thickness)
		{
			fixed (Vector4* pcolor = &color)
			{
				RejectNewItemNative((Vector4*)pcolor, thickness);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndCreateNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[37])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[37])();
			#endif
		}

		public static void EndCreate()
		{
			EndCreateNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte BeginDeleteNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[38])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[38])();
			#endif
		}

		public static bool BeginDelete()
		{
			byte ret = BeginDeleteNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte QueryDeletedLinkNative(LinkId* linkId, PinId* startId, PinId* endId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId*, PinId*, PinId*, byte>)funcTable[39])(linkId, startId, endId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, nint, byte>)funcTable[39])((nint)linkId, (nint)startId, (nint)endId);
			#endif
		}

		public static bool QueryDeletedLink(LinkId* linkId, PinId* startId, PinId* endId)
		{
			byte ret = QueryDeletedLinkNative(linkId, startId, endId);
			return ret != 0;
		}

		public static bool QueryDeletedLink(ref LinkId linkId, PinId* startId, PinId* endId)
		{
			fixed (LinkId* plinkId = &linkId)
			{
				byte ret = QueryDeletedLinkNative((LinkId*)plinkId, startId, endId);
				return ret != 0;
			}
		}

		public static bool QueryDeletedLink(LinkId* linkId, ref PinId startId, PinId* endId)
		{
			fixed (PinId* pstartId = &startId)
			{
				byte ret = QueryDeletedLinkNative(linkId, (PinId*)pstartId, endId);
				return ret != 0;
			}
		}

		public static bool QueryDeletedLink(ref LinkId linkId, ref PinId startId, PinId* endId)
		{
			fixed (LinkId* plinkId = &linkId)
			{
				fixed (PinId* pstartId = &startId)
				{
					byte ret = QueryDeletedLinkNative((LinkId*)plinkId, (PinId*)pstartId, endId);
					return ret != 0;
				}
			}
		}

		public static bool QueryDeletedLink(LinkId* linkId, PinId* startId, ref PinId endId)
		{
			fixed (PinId* pendId = &endId)
			{
				byte ret = QueryDeletedLinkNative(linkId, startId, (PinId*)pendId);
				return ret != 0;
			}
		}

		public static bool QueryDeletedLink(ref LinkId linkId, PinId* startId, ref PinId endId)
		{
			fixed (LinkId* plinkId = &linkId)
			{
				fixed (PinId* pendId = &endId)
				{
					byte ret = QueryDeletedLinkNative((LinkId*)plinkId, startId, (PinId*)pendId);
					return ret != 0;
				}
			}
		}

		public static bool QueryDeletedLink(LinkId* linkId, ref PinId startId, ref PinId endId)
		{
			fixed (PinId* pstartId = &startId)
			{
				fixed (PinId* pendId = &endId)
				{
					byte ret = QueryDeletedLinkNative(linkId, (PinId*)pstartId, (PinId*)pendId);
					return ret != 0;
				}
			}
		}

		public static bool QueryDeletedLink(ref LinkId linkId, ref PinId startId, ref PinId endId)
		{
			fixed (LinkId* plinkId = &linkId)
			{
				fixed (PinId* pstartId = &startId)
				{
					fixed (PinId* pendId = &endId)
					{
						byte ret = QueryDeletedLinkNative((LinkId*)plinkId, (PinId*)pstartId, (PinId*)pendId);
						return ret != 0;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte QueryDeletedNodeNative(NodeId* nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId*, byte>)funcTable[40])(nodeId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[40])((nint)nodeId);
			#endif
		}

		public static bool QueryDeletedNode(NodeId* nodeId)
		{
			byte ret = QueryDeletedNodeNative(nodeId);
			return ret != 0;
		}

		public static bool QueryDeletedNode(ref NodeId nodeId)
		{
			fixed (NodeId* pnodeId = &nodeId)
			{
				byte ret = QueryDeletedNodeNative((NodeId*)pnodeId);
				return ret != 0;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptDeletedItemNative(byte deleteDependencies)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte, byte>)funcTable[41])(deleteDependencies);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte, byte>)funcTable[41])(deleteDependencies);
			#endif
		}

		public static bool AcceptDeletedItem(bool deleteDependencies)
		{
			byte ret = AcceptDeletedItemNative(deleteDependencies ? (byte)1 : (byte)0);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RejectDeletedItemNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[42])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[42])();
			#endif
		}

		public static void RejectDeletedItem()
		{
			RejectDeletedItemNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndDeleteNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[43])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[43])();
			#endif
		}

		public static void EndDelete()
		{
			EndDeleteNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetNodePositionNative(NodeId nodeId, Vector2* editorPosition)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, Vector2*, void>)funcTable[44])(nodeId, editorPosition);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, nint, void>)funcTable[44])(nodeId, (nint)editorPosition);
			#endif
		}

		public static void SetNodePosition(NodeId nodeId, Vector2* editorPosition)
		{
			SetNodePositionNative(nodeId, editorPosition);
		}

		public static void SetNodePosition(NodeId nodeId, ref Vector2 editorPosition)
		{
			fixed (Vector2* peditorPosition = &editorPosition)
			{
				SetNodePositionNative(nodeId, (Vector2*)peditorPosition);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetGroupSizeNative(NodeId nodeId, Vector2* size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, Vector2*, void>)funcTable[45])(nodeId, size);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, nint, void>)funcTable[45])(nodeId, (nint)size);
			#endif
		}

		public static void SetGroupSize(NodeId nodeId, Vector2* size)
		{
			SetGroupSizeNative(nodeId, size);
		}

		public static void SetGroupSize(NodeId nodeId, ref Vector2 size)
		{
			fixed (Vector2* psize = &size)
			{
				SetGroupSizeNative(nodeId, (Vector2*)psize);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 GetNodePositionNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, Vector2>)funcTable[46])(nodeId);
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<NodeId, Vector2>)funcTable[46])(nodeId);
			#endif
		}

		public static Vector2 GetNodePosition(NodeId nodeId)
		{
			Vector2 ret = GetNodePositionNative(nodeId);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 GetNodeSizeNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, Vector2>)funcTable[47])(nodeId);
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<NodeId, Vector2>)funcTable[47])(nodeId);
			#endif
		}

		public static Vector2 GetNodeSize(NodeId nodeId)
		{
			Vector2 ret = GetNodeSizeNative(nodeId);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CenterNodeOnScreenNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[48])(nodeId);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[48])(nodeId);
			#endif
		}

		public static void CenterNodeOnScreen(NodeId nodeId)
		{
			CenterNodeOnScreenNative(nodeId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetNodeZPositionNative(NodeId nodeId, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, float, void>)funcTable[49])(nodeId, z);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, float, void>)funcTable[49])(nodeId, z);
			#endif
		}

		public static void SetNodeZPosition(NodeId nodeId, float z)
		{
			SetNodeZPositionNative(nodeId, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetNodeZPositionNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, float>)funcTable[50])(nodeId);
			#else
			return (float)((delegate* unmanaged[Cdecl]<NodeId, float>)funcTable[50])(nodeId);
			#endif
		}

		public static float GetNodeZPosition(NodeId nodeId)
		{
			float ret = GetNodeZPositionNative(nodeId);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RestoreNodeStateNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[51])(nodeId);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[51])(nodeId);
			#endif
		}

		public static void RestoreNodeState(NodeId nodeId)
		{
			RestoreNodeStateNative(nodeId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SuspendNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[52])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[52])();
			#endif
		}

		public static void Suspend()
		{
			SuspendNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResumeNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[53])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[53])();
			#endif
		}

		public static void Resume()
		{
			ResumeNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsSuspendedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[54])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[54])();
			#endif
		}

		public static bool IsSuspended()
		{
			byte ret = IsSuspendedNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsActiveNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[55])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[55])();
			#endif
		}

		public static bool IsActive()
		{
			byte ret = IsActiveNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte HasSelectionChangedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[56])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[56])();
			#endif
		}

		public static bool HasSelectionChanged()
		{
			byte ret = HasSelectionChangedNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetSelectedObjectCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[57])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[57])();
			#endif
		}

		public static int GetSelectedObjectCount()
		{
			int ret = GetSelectedObjectCountNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetSelectedNodesNative(NodeId* nodes, int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId*, int, int>)funcTable[58])(nodes, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[58])((nint)nodes, size);
			#endif
		}

		public static int GetSelectedNodes(NodeId* nodes, int size)
		{
			int ret = GetSelectedNodesNative(nodes, size);
			return ret;
		}

		public static int GetSelectedNodes(ref NodeId nodes, int size)
		{
			fixed (NodeId* pnodes = &nodes)
			{
				int ret = GetSelectedNodesNative((NodeId*)pnodes, size);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetSelectedLinksNative(LinkId* links, int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId*, int, int>)funcTable[59])(links, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[59])((nint)links, size);
			#endif
		}

		public static int GetSelectedLinks(LinkId* links, int size)
		{
			int ret = GetSelectedLinksNative(links, size);
			return ret;
		}

		public static int GetSelectedLinks(ref LinkId links, int size)
		{
			fixed (LinkId* plinks = &links)
			{
				int ret = GetSelectedLinksNative((LinkId*)plinks, size);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsNodeSelectedNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, byte>)funcTable[60])(nodeId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<NodeId, byte>)funcTable[60])(nodeId);
			#endif
		}

		public static bool IsNodeSelected(NodeId nodeId)
		{
			byte ret = IsNodeSelectedNative(nodeId);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsLinkSelectedNative(LinkId linkId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId, byte>)funcTable[61])(linkId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<LinkId, byte>)funcTable[61])(linkId);
			#endif
		}

		public static bool IsLinkSelected(LinkId linkId)
		{
			byte ret = IsLinkSelectedNative(linkId);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClearSelectionNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[62])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[62])();
			#endif
		}

		public static void ClearSelection()
		{
			ClearSelectionNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SelectNodeNative(NodeId nodeId, byte append)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, byte, void>)funcTable[63])(nodeId, append);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, byte, void>)funcTable[63])(nodeId, append);
			#endif
		}

		public static void SelectNode(NodeId nodeId, bool append)
		{
			SelectNodeNative(nodeId, append ? (byte)1 : (byte)0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SelectLinkNative(LinkId linkId, byte append)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<LinkId, byte, void>)funcTable[64])(linkId, append);
			#else
			((delegate* unmanaged[Cdecl]<LinkId, byte, void>)funcTable[64])(linkId, append);
			#endif
		}

		public static void SelectLink(LinkId linkId, bool append)
		{
			SelectLinkNative(linkId, append ? (byte)1 : (byte)0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeselectNodeNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[65])(nodeId);
			#else
			((delegate* unmanaged[Cdecl]<NodeId, void>)funcTable[65])(nodeId);
			#endif
		}

		public static void DeselectNode(NodeId nodeId)
		{
			DeselectNodeNative(nodeId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeselectLinkNative(LinkId linkId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<LinkId, void>)funcTable[66])(linkId);
			#else
			((delegate* unmanaged[Cdecl]<LinkId, void>)funcTable[66])(linkId);
			#endif
		}

		public static void DeselectLink(LinkId linkId)
		{
			DeselectLinkNative(linkId);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte DeleteNodeNative(NodeId nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId, byte>)funcTable[67])(nodeId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<NodeId, byte>)funcTable[67])(nodeId);
			#endif
		}

		public static bool DeleteNode(NodeId nodeId)
		{
			byte ret = DeleteNodeNative(nodeId);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte DeleteLinkNative(LinkId linkId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId, byte>)funcTable[68])(linkId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<LinkId, byte>)funcTable[68])(linkId);
			#endif
		}

		public static bool DeleteLink(LinkId linkId)
		{
			byte ret = DeleteLinkNative(linkId);
			return ret != 0;
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool HasAnyLinks(NodeId nodeId); // Returns true if node has any link connected<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte HasAnyLinksNative(PinId pinId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId, byte>)funcTable[69])(pinId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<PinId, byte>)funcTable[69])(pinId);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API bool HasAnyLinks(NodeId nodeId); // Returns true if node has any link connected<br/>
		/// </summary>
		public static bool HasAnyLinks(PinId pinId)
		{
			byte ret = HasAnyLinksNative(pinId);
			return ret != 0;
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API int BreakLinks(NodeId nodeId); // Break all links connected to this node<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int BreakLinksNative(PinId pinId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId, int>)funcTable[70])(pinId);
			#else
			return (int)((delegate* unmanaged[Cdecl]<PinId, int>)funcTable[70])(pinId);
			#endif
		}

		/// <summary>
		/// IMGUI_NODE_EDITOR_API int BreakLinks(NodeId nodeId); // Break all links connected to this node<br/>
		/// </summary>
		public static int BreakLinks(PinId pinId)
		{
			int ret = BreakLinksNative(pinId);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NavigateToContentNative(float duration)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[71])(duration);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[71])(duration);
			#endif
		}

		public static void NavigateToContent(float duration)
		{
			NavigateToContentNative(duration);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NavigateToSelectionNative(byte zoomIn, float duration)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, float, void>)funcTable[72])(zoomIn, duration);
			#else
			((delegate* unmanaged[Cdecl]<byte, float, void>)funcTable[72])(zoomIn, duration);
			#endif
		}

		public static void NavigateToSelection(bool zoomIn, float duration)
		{
			NavigateToSelectionNative(zoomIn ? (byte)1 : (byte)0, duration);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ShowNodeContextMenuNative(NodeId* nodeId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId*, byte>)funcTable[73])(nodeId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[73])((nint)nodeId);
			#endif
		}

		public static bool ShowNodeContextMenu(NodeId* nodeId)
		{
			byte ret = ShowNodeContextMenuNative(nodeId);
			return ret != 0;
		}

		public static bool ShowNodeContextMenu(ref NodeId nodeId)
		{
			fixed (NodeId* pnodeId = &nodeId)
			{
				byte ret = ShowNodeContextMenuNative((NodeId*)pnodeId);
				return ret != 0;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ShowPinContextMenuNative(PinId* pinId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId*, byte>)funcTable[74])(pinId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[74])((nint)pinId);
			#endif
		}

		public static bool ShowPinContextMenu(PinId* pinId)
		{
			byte ret = ShowPinContextMenuNative(pinId);
			return ret != 0;
		}

		public static bool ShowPinContextMenu(ref PinId pinId)
		{
			fixed (PinId* ppinId = &pinId)
			{
				byte ret = ShowPinContextMenuNative((PinId*)ppinId);
				return ret != 0;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ShowLinkContextMenuNative(LinkId* linkId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId*, byte>)funcTable[75])(linkId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[75])((nint)linkId);
			#endif
		}

		public static bool ShowLinkContextMenu(LinkId* linkId)
		{
			byte ret = ShowLinkContextMenuNative(linkId);
			return ret != 0;
		}

		public static bool ShowLinkContextMenu(ref LinkId linkId)
		{
			fixed (LinkId* plinkId = &linkId)
			{
				byte ret = ShowLinkContextMenuNative((LinkId*)plinkId);
				return ret != 0;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ShowBackgroundContextMenuNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[76])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[76])();
			#endif
		}

		public static bool ShowBackgroundContextMenu()
		{
			byte ret = ShowBackgroundContextMenuNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableShortcutsNative(byte enable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[77])(enable);
			#else
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[77])(enable);
			#endif
		}

		public static void EnableShortcuts(bool enable)
		{
			EnableShortcutsNative(enable ? (byte)1 : (byte)0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AreShortcutsEnabledNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[78])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[78])();
			#endif
		}

		public static bool AreShortcutsEnabled()
		{
			byte ret = AreShortcutsEnabledNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte BeginShortcutNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[79])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[79])();
			#endif
		}

		public static bool BeginShortcut()
		{
			byte ret = BeginShortcutNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptCutNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[80])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[80])();
			#endif
		}

		public static bool AcceptCut()
		{
			byte ret = AcceptCutNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptCopyNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[81])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[81])();
			#endif
		}

		public static bool AcceptCopy()
		{
			byte ret = AcceptCopyNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptPasteNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[82])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[82])();
			#endif
		}

		public static bool AcceptPaste()
		{
			byte ret = AcceptPasteNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptDuplicateNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[83])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[83])();
			#endif
		}

		public static bool AcceptDuplicate()
		{
			byte ret = AcceptDuplicateNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcceptCreateNodeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[84])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[84])();
			#endif
		}

		public static bool AcceptCreateNode()
		{
			byte ret = AcceptCreateNodeNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetActionContextSizeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[85])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[85])();
			#endif
		}

		public static int GetActionContextSize()
		{
			int ret = GetActionContextSizeNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetActionContextNodesNative(NodeId* nodes, int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId*, int, int>)funcTable[86])(nodes, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[86])((nint)nodes, size);
			#endif
		}

		public static int GetActionContextNodes(NodeId* nodes, int size)
		{
			int ret = GetActionContextNodesNative(nodes, size);
			return ret;
		}

		public static int GetActionContextNodes(ref NodeId nodes, int size)
		{
			fixed (NodeId* pnodes = &nodes)
			{
				int ret = GetActionContextNodesNative((NodeId*)pnodes, size);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetActionContextLinksNative(LinkId* links, int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId*, int, int>)funcTable[87])(links, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[87])((nint)links, size);
			#endif
		}

		public static int GetActionContextLinks(LinkId* links, int size)
		{
			int ret = GetActionContextLinksNative(links, size);
			return ret;
		}

		public static int GetActionContextLinks(ref LinkId links, int size)
		{
			fixed (LinkId* plinks = &links)
			{
				int ret = GetActionContextLinksNative((LinkId*)plinks, size);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndShortcutNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[88])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[88])();
			#endif
		}

		public static void EndShortcut()
		{
			EndShortcutNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetCurrentZoomNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float>)funcTable[89])();
			#else
			return (float)((delegate* unmanaged[Cdecl]<float>)funcTable[89])();
			#endif
		}

		public static float GetCurrentZoom()
		{
			float ret = GetCurrentZoomNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static NodeId GetHoveredNodeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId>)funcTable[90])();
			#else
			return (NodeId)((delegate* unmanaged[Cdecl]<NodeId>)funcTable[90])();
			#endif
		}

		public static NodeId GetHoveredNode()
		{
			NodeId ret = GetHoveredNodeNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static PinId GetHoveredPinNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId>)funcTable[91])();
			#else
			return (PinId)((delegate* unmanaged[Cdecl]<PinId>)funcTable[91])();
			#endif
		}

		public static PinId GetHoveredPin()
		{
			PinId ret = GetHoveredPinNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static LinkId GetHoveredLinkNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId>)funcTable[92])();
			#else
			return (LinkId)((delegate* unmanaged[Cdecl]<LinkId>)funcTable[92])();
			#endif
		}

		public static LinkId GetHoveredLink()
		{
			LinkId ret = GetHoveredLinkNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static NodeId GetDoubleClickedNodeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId>)funcTable[93])();
			#else
			return (NodeId)((delegate* unmanaged[Cdecl]<NodeId>)funcTable[93])();
			#endif
		}

		public static NodeId GetDoubleClickedNode()
		{
			NodeId ret = GetDoubleClickedNodeNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static PinId GetDoubleClickedPinNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId>)funcTable[94])();
			#else
			return (PinId)((delegate* unmanaged[Cdecl]<PinId>)funcTable[94])();
			#endif
		}

		public static PinId GetDoubleClickedPin()
		{
			PinId ret = GetDoubleClickedPinNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static LinkId GetDoubleClickedLinkNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId>)funcTable[95])();
			#else
			return (LinkId)((delegate* unmanaged[Cdecl]<LinkId>)funcTable[95])();
			#endif
		}

		public static LinkId GetDoubleClickedLink()
		{
			LinkId ret = GetDoubleClickedLinkNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsBackgroundClickedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[96])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[96])();
			#endif
		}

		public static bool IsBackgroundClicked()
		{
			byte ret = IsBackgroundClickedNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsBackgroundDoubleClickedNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[97])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[97])();
			#endif
		}

		public static bool IsBackgroundDoubleClicked()
		{
			byte ret = IsBackgroundDoubleClickedNative();
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetBackgroundClickButtonIndexNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[98])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[98])();
			#endif
		}

		public static int GetBackgroundClickButtonIndex()
		{
			int ret = GetBackgroundClickButtonIndexNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetBackgroundDoubleClickButtonIndexNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[99])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[99])();
			#endif
		}

		public static int GetBackgroundDoubleClickButtonIndex()
		{
			int ret = GetBackgroundDoubleClickButtonIndexNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte GetLinkPinsNative(LinkId linkId, PinId* startPinId, PinId* endPinId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<LinkId, PinId*, PinId*, byte>)funcTable[100])(linkId, startPinId, endPinId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<LinkId, nint, nint, byte>)funcTable[100])(linkId, (nint)startPinId, (nint)endPinId);
			#endif
		}

		public static bool GetLinkPins(LinkId linkId, PinId* startPinId, PinId* endPinId)
		{
			byte ret = GetLinkPinsNative(linkId, startPinId, endPinId);
			return ret != 0;
		}

		public static bool GetLinkPins(LinkId linkId, ref PinId startPinId, PinId* endPinId)
		{
			fixed (PinId* pstartPinId = &startPinId)
			{
				byte ret = GetLinkPinsNative(linkId, (PinId*)pstartPinId, endPinId);
				return ret != 0;
			}
		}

		public static bool GetLinkPins(LinkId linkId, PinId* startPinId, ref PinId endPinId)
		{
			fixed (PinId* pendPinId = &endPinId)
			{
				byte ret = GetLinkPinsNative(linkId, startPinId, (PinId*)pendPinId);
				return ret != 0;
			}
		}

		public static bool GetLinkPins(LinkId linkId, ref PinId startPinId, ref PinId endPinId)
		{
			fixed (PinId* pstartPinId = &startPinId)
			{
				fixed (PinId* pendPinId = &endPinId)
				{
					byte ret = GetLinkPinsNative(linkId, (PinId*)pstartPinId, (PinId*)pendPinId);
					return ret != 0;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte PinHadAnyLinksNative(PinId pinId)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<PinId, byte>)funcTable[101])(pinId);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<PinId, byte>)funcTable[101])(pinId);
			#endif
		}

		public static bool PinHadAnyLinks(PinId pinId)
		{
			byte ret = PinHadAnyLinksNative(pinId);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 GetScreenSizeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2>)funcTable[102])();
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<Vector2>)funcTable[102])();
			#endif
		}

		public static Vector2 GetScreenSize()
		{
			Vector2 ret = GetScreenSizeNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 ScreenToCanvasNative(Vector2* pos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2*, Vector2>)funcTable[103])(pos);
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<nint, Vector2>)funcTable[103])((nint)pos);
			#endif
		}

		public static Vector2 ScreenToCanvas(Vector2* pos)
		{
			Vector2 ret = ScreenToCanvasNative(pos);
			return ret;
		}

		public static Vector2 ScreenToCanvas(ref Vector2 pos)
		{
			fixed (Vector2* ppos = &pos)
			{
				Vector2 ret = ScreenToCanvasNative((Vector2*)ppos);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static Vector2 CanvasToScreenNative(Vector2* pos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<Vector2*, Vector2>)funcTable[104])(pos);
			#else
			return (Vector2)((delegate* unmanaged[Cdecl]<nint, Vector2>)funcTable[104])((nint)pos);
			#endif
		}

		public static Vector2 CanvasToScreen(Vector2* pos)
		{
			Vector2 ret = CanvasToScreenNative(pos);
			return ret;
		}

		public static Vector2 CanvasToScreen(ref Vector2 pos)
		{
			fixed (Vector2* ppos = &pos)
			{
				Vector2 ret = CanvasToScreenNative((Vector2*)ppos);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetNodeCountNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int>)funcTable[105])();
			#else
			return (int)((delegate* unmanaged[Cdecl]<int>)funcTable[105])();
			#endif
		}

		public static int GetNodeCount()
		{
			int ret = GetNodeCountNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetOrderedNodeIdsNative(NodeId* nodes, int size)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<NodeId*, int, int>)funcTable[106])(nodes, size);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int, int>)funcTable[106])((nint)nodes, size);
			#endif
		}

		public static int GetOrderedNodeIds(NodeId* nodes, int size)
		{
			int ret = GetOrderedNodeIdsNative(nodes, size);
			return ret;
		}

		public static int GetOrderedNodeIds(ref NodeId nodes, int size)
		{
			fixed (NodeId* pnodes = &nodes)
			{
				int ret = GetOrderedNodeIdsNative((NodeId*)pnodes, size);
				return ret;
			}
		}

	}
}
