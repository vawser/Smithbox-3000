// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGuiNodeEditor
{
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Config
	{
		public unsafe byte* SettingsFile;
		public unsafe void* BeginSaveSession;
		public unsafe void* EndSaveSession;
		public unsafe void* SaveSettings;
		public unsafe void* LoadSettings;
		public unsafe void* SaveNodeSettings;
		public unsafe void* LoadNodeSettings;
		public unsafe void* UserPointer;
		public ImVector<float> CustomZoomLevels;
		public CanvasSizeMode CanvasSizeMode;
		/// <summary>
		/// Mouse button index drag action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public int DragButtonIndex;

		/// <summary>
		/// Mouse button index select action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public int SelectButtonIndex;

		/// <summary>
		/// Mouse button index navigate action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public int NavigateButtonIndex;

		/// <summary>
		/// Mouse button index context menu action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public int ContextMenuButtonIndex;

		public byte EnableSmoothZoom;
		public float SmoothZoomPower;

		public unsafe Config(byte* settingsFile = default, ConfigSession beginSaveSession = default, ConfigSession endSaveSession = default, ConfigSaveSettings saveSettings = default, ConfigLoadSettings loadSettings = default, ConfigSaveNodeSettings saveNodeSettings = default, ConfigLoadNodeSettings loadNodeSettings = default, void* userPointer = default, ImVector<float> customZoomLevels = default, CanvasSizeMode canvasSizeMode = default, int dragButtonIndex = default, int selectButtonIndex = default, int navigateButtonIndex = default, int contextMenuButtonIndex = default, bool enableSmoothZoom = default, float smoothZoomPower = default)
		{
			SettingsFile = settingsFile;
			BeginSaveSession = (void*)Marshal.GetFunctionPointerForDelegate(beginSaveSession);
			EndSaveSession = (void*)Marshal.GetFunctionPointerForDelegate(endSaveSession);
			SaveSettings = (void*)Marshal.GetFunctionPointerForDelegate(saveSettings);
			LoadSettings = (void*)Marshal.GetFunctionPointerForDelegate(loadSettings);
			SaveNodeSettings = (void*)Marshal.GetFunctionPointerForDelegate(saveNodeSettings);
			LoadNodeSettings = (void*)Marshal.GetFunctionPointerForDelegate(loadNodeSettings);
			UserPointer = userPointer;
			CustomZoomLevels = customZoomLevels;
			CanvasSizeMode = canvasSizeMode;
			DragButtonIndex = dragButtonIndex;
			SelectButtonIndex = selectButtonIndex;
			NavigateButtonIndex = navigateButtonIndex;
			ContextMenuButtonIndex = contextMenuButtonIndex;
			EnableSmoothZoom = enableSmoothZoom ? (byte)1 : (byte)0;
			SmoothZoomPower = smoothZoomPower;
		}


	}

	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ConfigPtr : IEquatable<ConfigPtr>
	{
		public ConfigPtr(Config* handle) { Handle = handle; }

		public Config* Handle;

		public bool IsNull => Handle == null;

		public static ConfigPtr Null => new ConfigPtr(null);

		public Config this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ConfigPtr(Config* handle) => new ConfigPtr(handle);

		public static implicit operator Config*(ConfigPtr handle) => handle.Handle;

		public static bool operator ==(ConfigPtr left, ConfigPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ConfigPtr left, ConfigPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ConfigPtr left, Config* right) => left.Handle == right;

		public static bool operator !=(ConfigPtr left, Config* right) => left.Handle != right;

		public bool Equals(ConfigPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ConfigPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ConfigPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		public byte* SettingsFile { get => Handle->SettingsFile; set => Handle->SettingsFile = value; }
		public void* BeginSaveSession { get => Handle->BeginSaveSession; set => Handle->BeginSaveSession = value; }
		public void* EndSaveSession { get => Handle->EndSaveSession; set => Handle->EndSaveSession = value; }
		public void* SaveSettings { get => Handle->SaveSettings; set => Handle->SaveSettings = value; }
		public void* LoadSettings { get => Handle->LoadSettings; set => Handle->LoadSettings = value; }
		public void* SaveNodeSettings { get => Handle->SaveNodeSettings; set => Handle->SaveNodeSettings = value; }
		public void* LoadNodeSettings { get => Handle->LoadNodeSettings; set => Handle->LoadNodeSettings = value; }
		public void* UserPointer { get => Handle->UserPointer; set => Handle->UserPointer = value; }
		public ref ImVector<float> CustomZoomLevels => ref Unsafe.AsRef<ImVector<float>>(&Handle->CustomZoomLevels);
		public ref CanvasSizeMode CanvasSizeMode => ref Unsafe.AsRef<CanvasSizeMode>(&Handle->CanvasSizeMode);
		/// <summary>
		/// Mouse button index drag action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public ref int DragButtonIndex => ref Unsafe.AsRef<int>(&Handle->DragButtonIndex);
		/// <summary>
		/// Mouse button index select action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public ref int SelectButtonIndex => ref Unsafe.AsRef<int>(&Handle->SelectButtonIndex);
		/// <summary>
		/// Mouse button index navigate action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public ref int NavigateButtonIndex => ref Unsafe.AsRef<int>(&Handle->NavigateButtonIndex);
		/// <summary>
		/// Mouse button index context menu action will react to (0-left, 1-right, 2-middle)<br/>
		/// </summary>
		public ref int ContextMenuButtonIndex => ref Unsafe.AsRef<int>(&Handle->ContextMenuButtonIndex);
		public ref bool EnableSmoothZoom => ref Unsafe.AsRef<bool>(&Handle->EnableSmoothZoom);
		public ref float SmoothZoomPower => ref Unsafe.AsRef<float>(&Handle->SmoothZoomPower);
	}

}
