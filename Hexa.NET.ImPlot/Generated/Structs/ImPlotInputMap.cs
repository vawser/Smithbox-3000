// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImPlotInputMap
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseButton Pan;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int PanMod;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseButton Fit;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseButton Select;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseButton SelectCancel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SelectMod;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SelectHorzMod;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SelectVertMod;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseButton Menu;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int OverrideMod;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ZoomMod;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ZoomRate;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImPlotInputMap(ImGuiMouseButton pan = default, int panMod = default, ImGuiMouseButton fit = default, ImGuiMouseButton select = default, ImGuiMouseButton selectCancel = default, int selectMod = default, int selectHorzMod = default, int selectVertMod = default, ImGuiMouseButton menu = default, int overrideMod = default, int zoomMod = default, float zoomRate = default)
		{
			Pan = pan;
			PanMod = panMod;
			Fit = fit;
			Select = select;
			SelectCancel = selectCancel;
			SelectMod = selectMod;
			SelectHorzMod = selectHorzMod;
			SelectVertMod = selectVertMod;
			Menu = menu;
			OverrideMod = overrideMod;
			ZoomMod = zoomMod;
			ZoomRate = zoomRate;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImPlotInputMap* @this = &this)
			{
				ImPlot.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImPlotInputMapPtr : IEquatable<ImPlotInputMapPtr>
	{
		public ImPlotInputMapPtr(ImPlotInputMap* handle) { Handle = handle; }

		public ImPlotInputMap* Handle;

		public bool IsNull => Handle == null;

		public static ImPlotInputMapPtr Null => new ImPlotInputMapPtr(null);

		public ImPlotInputMap this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImPlotInputMapPtr(ImPlotInputMap* handle) => new ImPlotInputMapPtr(handle);

		public static implicit operator ImPlotInputMap*(ImPlotInputMapPtr handle) => handle.Handle;

		public static bool operator ==(ImPlotInputMapPtr left, ImPlotInputMapPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImPlotInputMapPtr left, ImPlotInputMapPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImPlotInputMapPtr left, ImPlotInputMap* right) => left.Handle == right;

		public static bool operator !=(ImPlotInputMapPtr left, ImPlotInputMap* right) => left.Handle != right;

		public bool Equals(ImPlotInputMapPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImPlotInputMapPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImPlotInputMapPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseButton Pan => ref Unsafe.AsRef<ImGuiMouseButton>(&Handle->Pan);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int PanMod => ref Unsafe.AsRef<int>(&Handle->PanMod);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseButton Fit => ref Unsafe.AsRef<ImGuiMouseButton>(&Handle->Fit);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseButton Select => ref Unsafe.AsRef<ImGuiMouseButton>(&Handle->Select);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseButton SelectCancel => ref Unsafe.AsRef<ImGuiMouseButton>(&Handle->SelectCancel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int SelectMod => ref Unsafe.AsRef<int>(&Handle->SelectMod);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int SelectHorzMod => ref Unsafe.AsRef<int>(&Handle->SelectHorzMod);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int SelectVertMod => ref Unsafe.AsRef<int>(&Handle->SelectVertMod);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseButton Menu => ref Unsafe.AsRef<ImGuiMouseButton>(&Handle->Menu);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int OverrideMod => ref Unsafe.AsRef<int>(&Handle->OverrideMod);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ZoomMod => ref Unsafe.AsRef<int>(&Handle->ZoomMod);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ZoomRate => ref Unsafe.AsRef<float>(&Handle->ZoomRate);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImPlot.DestroyNative(Handle);
		}

	}

}
