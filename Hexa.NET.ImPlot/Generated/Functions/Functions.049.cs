// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot
{
	public unsafe partial class ImPlot
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref byte values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (byte* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (byte*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref byte values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (byte* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (byte*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref byte values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (byte* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (byte*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref byte values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (byte* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (byte*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref byte values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (byte* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (byte*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotBarGroupsNative(byte** labelIds, short* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, short*, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[161])(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[161])((nint)labelIds, (nint)values, itemCount, groupCount, groupSize, shift, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, short* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, short* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, short* values, int itemCount, int groupCount, double groupSize)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, short* values, int itemCount, int groupCount)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, short* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, short* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, short* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, short* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, short* values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, short* values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, short* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, short* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref short values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (short*)pvalues, itemCount, groupCount, groupSize, shift, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref short values, int itemCount, int groupCount, double groupSize, double shift)
		{
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (short*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref short values, int itemCount, int groupCount, double groupSize)
		{
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (short*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref short values, int itemCount, int groupCount)
		{
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (short*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref short values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (short*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref short values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (short*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref short values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (short*)pvalues, itemCount, groupCount, groupSize, shift, flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref short values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (short*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref short values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (short*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref short values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (short*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref short values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (short*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref short values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (short* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (short*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotBarGroupsNative(byte** labelIds, ushort* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, ushort*, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[162])(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[162])((nint)labelIds, (nint)values, itemCount, groupCount, groupSize, shift, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ushort* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ushort* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ushort* values, int itemCount, int groupCount, double groupSize)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ushort* values, int itemCount, int groupCount)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ushort* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ushort* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ushort* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ushort* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ushort* values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ushort* values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ushort* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ushort* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ushort values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ushort*)pvalues, itemCount, groupCount, groupSize, shift, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ushort values, int itemCount, int groupCount, double groupSize, double shift)
		{
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ushort*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ushort values, int itemCount, int groupCount, double groupSize)
		{
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ushort*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ushort values, int itemCount, int groupCount)
		{
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ushort*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ushort values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ushort*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ushort values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ushort*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ushort values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ushort*)pvalues, itemCount, groupCount, groupSize, shift, flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ushort values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ushort*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ushort values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ushort*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ushort values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ushort*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ushort values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ushort*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ushort values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ushort* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ushort*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotBarGroupsNative(byte** labelIds, int* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, int*, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[163])(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[163])((nint)labelIds, (nint)values, itemCount, groupCount, groupSize, shift, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, int* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, int* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, int* values, int itemCount, int groupCount, double groupSize)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, int* values, int itemCount, int groupCount)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, int* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, int* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, int* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, int* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, int* values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, int* values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, int* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, int* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref int values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (int*)pvalues, itemCount, groupCount, groupSize, shift, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref int values, int itemCount, int groupCount, double groupSize, double shift)
		{
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (int*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref int values, int itemCount, int groupCount, double groupSize)
		{
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (int*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref int values, int itemCount, int groupCount)
		{
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (int*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref int values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (int*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref int values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (int*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref int values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (int*)pvalues, itemCount, groupCount, groupSize, shift, flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref int values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (int*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref int values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (int*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref int values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (int*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref int values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (int*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref int values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (int* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (int*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotBarGroupsNative(byte** labelIds, uint* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, uint*, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[164])(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[164])((nint)labelIds, (nint)values, itemCount, groupCount, groupSize, shift, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, uint* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, uint* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, uint* values, int itemCount, int groupCount, double groupSize)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, uint* values, int itemCount, int groupCount)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, uint* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, uint* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, uint* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, uint* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, uint* values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, uint* values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, uint* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, uint* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref uint values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (uint*)pvalues, itemCount, groupCount, groupSize, shift, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref uint values, int itemCount, int groupCount, double groupSize, double shift)
		{
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (uint*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref uint values, int itemCount, int groupCount, double groupSize)
		{
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (uint*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref uint values, int itemCount, int groupCount)
		{
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (uint*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref uint values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (uint*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref uint values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (uint*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref uint values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (uint*)pvalues, itemCount, groupCount, groupSize, shift, flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref uint values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (uint*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref uint values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (uint*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref uint values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (uint*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref uint values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (uint*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref uint values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (uint* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (uint*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotBarGroupsNative(byte** labelIds, long* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, long*, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[165])(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[165])((nint)labelIds, (nint)values, itemCount, groupCount, groupSize, shift, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, long* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, long* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, long* values, int itemCount, int groupCount, double groupSize)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, long* values, int itemCount, int groupCount)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, long* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, long* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, long* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, long* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, long* values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, long* values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, long* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, long* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref long values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (long*)pvalues, itemCount, groupCount, groupSize, shift, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref long values, int itemCount, int groupCount, double groupSize, double shift)
		{
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (long*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref long values, int itemCount, int groupCount, double groupSize)
		{
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (long*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref long values, int itemCount, int groupCount)
		{
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (long*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref long values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (long*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref long values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (long*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref long values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (long*)pvalues, itemCount, groupCount, groupSize, shift, flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref long values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (long*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref long values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (long*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref long values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (long*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref long values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (long*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref long values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (long* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (long*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotBarGroupsNative(byte** labelIds, ulong* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte**, ulong*, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[166])(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, int, double, double, ImPlotBarGroupsFlags, void>)funcTable[166])((nint)labelIds, (nint)values, itemCount, groupCount, groupSize, shift, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ulong* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ulong* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ulong* values, int itemCount, int groupCount, double groupSize)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ulong* values, int itemCount, int groupCount)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ulong* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, groupSize, (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ulong* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			PlotBarGroupsNative(labelIds, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ulong* values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ulong* values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ulong* values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ulong* values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ulong* values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, groupSize, (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ulong* values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			PlotBarGroupsNative(pStrArray0, values, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			for (int i = 0; i < labelIds.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ulong values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ulong*)pvalues, itemCount, groupCount, groupSize, shift, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ulong values, int itemCount, int groupCount, double groupSize, double shift)
		{
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ulong*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ulong values, int itemCount, int groupCount, double groupSize)
		{
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ulong*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ulong values, int itemCount, int groupCount)
		{
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ulong*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ulong values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ulong*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(byte** labelIds, ref ulong values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(labelIds, (ulong*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ulong values, int itemCount, int groupCount, double groupSize, double shift, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ulong*)pvalues, itemCount, groupCount, groupSize, shift, flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ulong values, int itemCount, int groupCount, double groupSize, double shift)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ulong*)pvalues, itemCount, groupCount, groupSize, shift, (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ulong values, int itemCount, int groupCount, double groupSize)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ulong*)pvalues, itemCount, groupCount, groupSize, (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ulong values, int itemCount, int groupCount)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ulong*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), (ImPlotBarGroupsFlags)(0));
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ulong values, int itemCount, int groupCount, double groupSize, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ulong*)pvalues, itemCount, groupCount, groupSize, (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotBarGroups(string[] labelIds, ref ulong values, int itemCount, int groupCount, ImPlotBarGroupsFlags flags)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labelIds);
			if (labelIds != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labelIds.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labelIds[i]);
			}
			fixed (ulong* pvalues = &values)
			{
				PlotBarGroupsNative(pStrArray0, (ulong*)pvalues, itemCount, groupCount, (double)(0.67), (double)(0), flags);
				for (int i = 0; i < labelIds.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotErrorBarsNative(byte* labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, float*, float*, float*, int, ImPlotErrorBarsFlags, int, int, void>)funcTable[167])(labelId, xs, ys, err, count, flags, offset, stride);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int, ImPlotErrorBarsFlags, int, int, void>)funcTable[167])((nint)labelId, (nint)xs, (nint)ys, (nint)err, count, flags, offset, stride);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			PlotErrorBarsNative(labelId, xs, ys, err, count, flags, offset, stride);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			PlotErrorBarsNative(labelId, xs, ys, err, count, flags, offset, (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			PlotErrorBarsNative(labelId, xs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, float* ys, float* err, int count)
		{
			PlotErrorBarsNative(labelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, float* ys, float* err, int count, int offset)
		{
			PlotErrorBarsNative(labelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, float* ys, float* err, int count, int offset, int stride)
		{
			PlotErrorBarsNative(labelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, float* ys, float* err, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, float* ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, float* ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, float* ys, float* err, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, float* ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, float* ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotErrorBarsNative((byte*)plabelId, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotErrorBarsNative(pStr0, xs, ys, err, count, flags, offset, stride);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotErrorBarsNative(pStr0, xs, ys, err, count, flags, offset, (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotErrorBarsNative(pStr0, xs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, float* ys, float* err, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotErrorBarsNative(pStr0, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, float* ys, float* err, int count, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotErrorBarsNative(pStr0, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, float* ys, float* err, int count, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotErrorBarsNative(pStr0, xs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(labelId, (float*)pxs, ys, err, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(labelId, (float*)pxs, ys, err, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(labelId, (float*)pxs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, float* ys, float* err, int count)
		{
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(labelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, float* ys, float* err, int count, int offset)
		{
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(labelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, float* ys, float* err, int count, int offset, int stride)
		{
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(labelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, float* ys, float* err, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, float* ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, float* ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, float* ys, float* err, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, float* ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, float* ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotErrorBarsNative((byte*)plabelId, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(pStr0, (float*)pxs, ys, err, count, flags, offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(pStr0, (float*)pxs, ys, err, count, flags, offset, (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, ref float xs, float* ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(pStr0, (float*)pxs, ys, err, count, flags, (int)(0), (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, ref float xs, float* ys, float* err, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(pStr0, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, ref float xs, float* ys, float* err, int count, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(pStr0, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, ref float xs, float* ys, float* err, int count, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotErrorBarsNative(pStr0, (float*)pxs, ys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(labelId, xs, (float*)pys, err, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(labelId, xs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(labelId, xs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, ref float ys, float* err, int count)
		{
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(labelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, ref float ys, float* err, int count, int offset)
		{
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(labelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, float* xs, ref float ys, float* err, int count, int offset, int stride)
		{
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(labelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, ref float ys, float* err, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, ref float ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, float* xs, ref float ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, ref float ys, float* err, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, ref float ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, float* xs, ref float ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative((byte*)plabelId, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(pStr0, xs, (float*)pys, err, count, flags, offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(pStr0, xs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(pStr0, xs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, ref float ys, float* err, int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(pStr0, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, ref float ys, float* err, int count, int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(pStr0, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(string labelId, float* xs, ref float ys, float* err, int count, int offset, int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pys = &ys)
			{
				PlotErrorBarsNative(pStr0, xs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (float* pxs = &xs)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative(labelId, (float*)pxs, (float*)pys, err, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (float* pxs = &xs)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative(labelId, (float*)pxs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (float* pxs = &xs)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative(labelId, (float*)pxs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, ref float ys, float* err, int count)
		{
			fixed (float* pxs = &xs)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative(labelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, ref float ys, float* err, int count, int offset)
		{
			fixed (float* pxs = &xs)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative(labelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(byte* labelId, ref float xs, ref float ys, float* err, int count, int offset, int stride)
		{
			fixed (float* pxs = &xs)
			{
				fixed (float* pys = &ys)
				{
					PlotErrorBarsNative(labelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, flags, offset, stride);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, ref float ys, float* err, int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, ref float ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ref byte labelId, ref float xs, ref float ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, flags, offset, stride);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, flags, offset, (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, ref float ys, float* err, int count, ImPlotErrorBarsFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, flags, (int)(0), (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, ref float ys, float* err, int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), (int)(0), (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, ref float ys, float* err, int count, int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, (int)(sizeof(float)));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void PlotErrorBars(ReadOnlySpan<byte> labelId, ref float xs, ref float ys, float* err, int count, int offset, int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					fixed (float* pys = &ys)
					{
						PlotErrorBarsNative((byte*)plabelId, (float*)pxs, (float*)pys, err, count, (ImPlotErrorBarsFlags)(0), offset, stride);
					}
				}
			}
		}
	}
}
