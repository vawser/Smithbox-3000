// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImNodes
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImNodesIO
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public EmulateThreeButtonMouse EmulateThreeButtonMouse;

		/// <summary>
		/// To be documented.
		/// </summary>
		public LinkDetachWithModifierClick LinkDetachWithModifierClick;

		/// <summary>
		/// To be documented.
		/// </summary>
		public MultipleSelectModifier MultipleSelectModifier;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int AltMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float AutoPanningSpeed;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImNodesIO(EmulateThreeButtonMouse emulateThreeButtonMouse = default, LinkDetachWithModifierClick linkDetachWithModifierClick = default, MultipleSelectModifier multipleSelectModifier = default, int altMouseButton = default, float autoPanningSpeed = default)
		{
			EmulateThreeButtonMouse = emulateThreeButtonMouse;
			LinkDetachWithModifierClick = linkDetachWithModifierClick;
			MultipleSelectModifier = multipleSelectModifier;
			AltMouseButton = altMouseButton;
			AutoPanningSpeed = autoPanningSpeed;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImNodesIO* @this = &this)
			{
				ImNodes.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImNodesIOPtr : IEquatable<ImNodesIOPtr>
	{
		public ImNodesIOPtr(ImNodesIO* handle) { Handle = handle; }

		public ImNodesIO* Handle;

		public bool IsNull => Handle == null;

		public static ImNodesIOPtr Null => new ImNodesIOPtr(null);

		public ImNodesIO this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImNodesIOPtr(ImNodesIO* handle) => new ImNodesIOPtr(handle);

		public static implicit operator ImNodesIO*(ImNodesIOPtr handle) => handle.Handle;

		public static bool operator ==(ImNodesIOPtr left, ImNodesIOPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImNodesIOPtr left, ImNodesIOPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImNodesIOPtr left, ImNodesIO* right) => left.Handle == right;

		public static bool operator !=(ImNodesIOPtr left, ImNodesIO* right) => left.Handle != right;

		public bool Equals(ImNodesIOPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImNodesIOPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImNodesIOPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref EmulateThreeButtonMouse EmulateThreeButtonMouse => ref Unsafe.AsRef<EmulateThreeButtonMouse>(&Handle->EmulateThreeButtonMouse);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref LinkDetachWithModifierClick LinkDetachWithModifierClick => ref Unsafe.AsRef<LinkDetachWithModifierClick>(&Handle->LinkDetachWithModifierClick);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref MultipleSelectModifier MultipleSelectModifier => ref Unsafe.AsRef<MultipleSelectModifier>(&Handle->MultipleSelectModifier);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int AltMouseButton => ref Unsafe.AsRef<int>(&Handle->AltMouseButton);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float AutoPanningSpeed => ref Unsafe.AsRef<float>(&Handle->AutoPanningSpeed);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImNodes.DestroyNative(Handle);
		}

	}

}
