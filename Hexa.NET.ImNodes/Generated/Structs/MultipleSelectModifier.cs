// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImNodes
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct MultipleSelectModifier
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe bool* Modifier;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe MultipleSelectModifier(bool* modifier = default)
		{
			Modifier = modifier;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (MultipleSelectModifier* @this = &this)
			{
				ImNodes.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct MultipleSelectModifierPtr : IEquatable<MultipleSelectModifierPtr>
	{
		public MultipleSelectModifierPtr(MultipleSelectModifier* handle) { Handle = handle; }

		public MultipleSelectModifier* Handle;

		public bool IsNull => Handle == null;

		public static MultipleSelectModifierPtr Null => new MultipleSelectModifierPtr(null);

		public MultipleSelectModifier this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator MultipleSelectModifierPtr(MultipleSelectModifier* handle) => new MultipleSelectModifierPtr(handle);

		public static implicit operator MultipleSelectModifier*(MultipleSelectModifierPtr handle) => handle.Handle;

		public static bool operator ==(MultipleSelectModifierPtr left, MultipleSelectModifierPtr right) => left.Handle == right.Handle;

		public static bool operator !=(MultipleSelectModifierPtr left, MultipleSelectModifierPtr right) => left.Handle != right.Handle;

		public static bool operator ==(MultipleSelectModifierPtr left, MultipleSelectModifier* right) => left.Handle == right;

		public static bool operator !=(MultipleSelectModifierPtr left, MultipleSelectModifier* right) => left.Handle != right;

		public bool Equals(MultipleSelectModifierPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is MultipleSelectModifierPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("MultipleSelectModifierPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public bool* Modifier { get => Handle->Modifier; set => Handle->Modifier = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImNodes.DestroyNative(Handle);
		}

	}

}
