// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.D3D12
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ID3D12CommandQueue
	{


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ID3D12CommandQueuePtr : IEquatable<ID3D12CommandQueuePtr>
	{
		public ID3D12CommandQueuePtr(ID3D12CommandQueue* handle) { Handle = handle; }

		public ID3D12CommandQueue* Handle;

		public bool IsNull => Handle == null;

		public static ID3D12CommandQueuePtr Null => new ID3D12CommandQueuePtr(null);

		public ID3D12CommandQueue this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ID3D12CommandQueuePtr(ID3D12CommandQueue* handle) => new ID3D12CommandQueuePtr(handle);

		public static implicit operator ID3D12CommandQueue*(ID3D12CommandQueuePtr handle) => handle.Handle;

		public static bool operator ==(ID3D12CommandQueuePtr left, ID3D12CommandQueuePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ID3D12CommandQueuePtr left, ID3D12CommandQueuePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ID3D12CommandQueuePtr left, ID3D12CommandQueue* right) => left.Handle == right;

		public static bool operator !=(ID3D12CommandQueuePtr left, ID3D12CommandQueue* right) => left.Handle != right;

		public bool Equals(ID3D12CommandQueuePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ID3D12CommandQueuePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ID3D12CommandQueuePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
	}

}
