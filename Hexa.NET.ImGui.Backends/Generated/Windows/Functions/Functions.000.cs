// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.Win32
{
	public unsafe partial class ImGuiImplWin32
	{
		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitNative(nint hwnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[57])(hwnd);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[57])(hwnd);
			#endif
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool Init(nint hwnd)
		{
			byte ret = InitNative(hwnd);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitForOpenGLNative(nint hwnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[58])(hwnd);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[58])(hwnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool InitForOpenGL(nint hwnd)
		{
			byte ret = InitForOpenGLNative(hwnd);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[59])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[59])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Shutdown()
		{
			ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[60])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[60])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void NewFrame()
		{
			NewFrameNative();
		}

		/// <summary>
		/// Win32 message handler your application need to call.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static nint WndProcHandlerNative(nint hWnd, uint msg, nuint wParam, nint lParam)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nint, uint, nuint, nint, nint>)funcTable[61])(hWnd, msg, wParam, lParam);
			#else
			return (nint)((delegate* unmanaged[Cdecl]<nint, uint, nuint, nint, nint>)funcTable[61])(hWnd, msg, wParam, lParam);
			#endif
		}

		/// <summary>
		/// Win32 message handler your application need to call.<br/>
		/// </summary>
		public static nint WndProcHandler(nint hWnd, uint msg, nuint wParam, nint lParam)
		{
			nint ret = WndProcHandlerNative(hWnd, msg, wParam, lParam);
			return ret;
		}

		/// <summary>
		/// DPI-related helpers (optional)<br/>
		/// - Use to enable DPI awareness without having to create an application manifest.<br/>
		/// - Your own app may already do this via a manifest or explicit calls. This is mostly useful for our examples/ apps.<br/>
		/// - In theory we could call simple functions from Windows SDK such as SetProcessDPIAware(), SetProcessDpiAwareness(), etc.<br/>
		/// but most of the functions provided by Microsoft require Windows 8.1/10+ SDK at compile time and Windows 8/10+ at runtime,<br/>
		/// neither we want to require the user to have. So we dynamically select and load those functions to avoid dependencies.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableDpiAwarenessNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[62])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[62])();
			#endif
		}

		/// <summary>
		/// DPI-related helpers (optional)<br/>
		/// - Use to enable DPI awareness without having to create an application manifest.<br/>
		/// - Your own app may already do this via a manifest or explicit calls. This is mostly useful for our examples/ apps.<br/>
		/// - In theory we could call simple functions from Windows SDK such as SetProcessDPIAware(), SetProcessDpiAwareness(), etc.<br/>
		/// but most of the functions provided by Microsoft require Windows 8.1/10+ SDK at compile time and Windows 8/10+ at runtime,<br/>
		/// neither we want to require the user to have. So we dynamically select and load those functions to avoid dependencies.<br/>
		/// </summary>
		public static void EnableDpiAwareness()
		{
			EnableDpiAwarenessNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetDpiScaleForHwndNative(nint hwnd)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nint, float>)funcTable[63])(hwnd);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[63])(hwnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float GetDpiScaleForHwnd(nint hwnd)
		{
			float ret = GetDpiScaleForHwndNative(hwnd);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float GetDpiScaleForMonitorNative(nint monitor)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<nint, float>)funcTable[64])(monitor);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[64])(monitor);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static float GetDpiScaleForMonitor(nint monitor)
		{
			float ret = GetDpiScaleForMonitorNative(monitor);
			return ret;
		}

		/// <summary>
		/// Transparency related helpers (optional) [experimental]<br/>
		/// - Use to enable alpha compositing transparency with the desktop.<br/>
		/// - Use together with e.g. clearing your framebuffer with zero-alpha.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableAlphaCompositingNative(nint hwnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[65])(hwnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[65])(hwnd);
			#endif
		}

		/// <summary>
		/// Transparency related helpers (optional) [experimental]<br/>
		/// - Use to enable alpha compositing transparency with the desktop.<br/>
		/// - Use together with e.g. clearing your framebuffer with zero-alpha.<br/>
		/// </summary>
		public static void EnableAlphaCompositing(nint hwnd)
		{
			EnableAlphaCompositingNative(hwnd);
		}

	}
}
