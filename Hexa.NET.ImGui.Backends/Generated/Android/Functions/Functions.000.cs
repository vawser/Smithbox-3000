// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImGui.Backends.Android
{
	public unsafe partial class ImGuiImplAndroid
	{
		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte InitNative(ANativeWindow* window)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ANativeWindow*, byte>)funcTable[77])(window);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[77])((nint)window);
			#endif
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool Init(ANativeWindowPtr window)
		{
			byte ret = InitNative(window);
			return ret != 0;
		}

		/// <summary>
		/// Follow "Getting Started" link and check examples/ folder to learn about using backends!<br/>
		/// </summary>
		public static bool Init(ref ANativeWindow window)
		{
			fixed (ANativeWindow* pwindow = &window)
			{
				byte ret = InitNative((ANativeWindow*)pwindow);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int HandleInputEventNative(AInputEvent* inputEvent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<AInputEvent*, int>)funcTable[78])(inputEvent);
			#else
			return (int)((delegate* unmanaged[Cdecl]<nint, int>)funcTable[78])((nint)inputEvent);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int HandleInputEvent(AInputEventPtr inputEvent)
		{
			int ret = HandleInputEventNative(inputEvent);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int HandleInputEvent(ref AInputEvent inputEvent)
		{
			fixed (AInputEvent* pinputEvent = &inputEvent)
			{
				int ret = HandleInputEventNative((AInputEvent*)pinputEvent);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShutdownNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[79])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[79])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Shutdown()
		{
			ShutdownNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NewFrameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[80])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[80])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void NewFrame()
		{
			NewFrameNative();
		}

	}
}
