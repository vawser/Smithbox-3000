// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Store data emitted by TreeNode() for usage by TreePop()<br/>
	/// - To implement ImGuiTreeNodeFlags_NavLeftJumpsBackHere: store the minimum amount of data<br/>
	/// which we can't infer in TreePop(), to perform the equivalent of NavApplyItemToResult().<br/>
	/// Only stored when the node is a potential candidate for landing on a Left arrow jump.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTreeNodeStackData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTreeNodeFlags TreeFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemFlags ItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavRect;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTreeNodeStackData(uint id = default, ImGuiTreeNodeFlags treeFlags = default, ImGuiItemFlags itemFlags = default, ImRect navRect = default)
		{
			ID = id;
			TreeFlags = treeFlags;
			ItemFlags = itemFlags;
			NavRect = navRect;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTreeNodeStackDataPtr : IEquatable<ImGuiTreeNodeStackDataPtr>
	{
		public ImGuiTreeNodeStackDataPtr(ImGuiTreeNodeStackData* handle) { Handle = handle; }

		public ImGuiTreeNodeStackData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTreeNodeStackDataPtr Null => new ImGuiTreeNodeStackDataPtr(null);

		public ImGuiTreeNodeStackData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTreeNodeStackDataPtr(ImGuiTreeNodeStackData* handle) => new ImGuiTreeNodeStackDataPtr(handle);

		public static implicit operator ImGuiTreeNodeStackData*(ImGuiTreeNodeStackDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTreeNodeStackDataPtr left, ImGuiTreeNodeStackDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTreeNodeStackDataPtr left, ImGuiTreeNodeStackDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTreeNodeStackDataPtr left, ImGuiTreeNodeStackData* right) => left.Handle == right;

		public static bool operator !=(ImGuiTreeNodeStackDataPtr left, ImGuiTreeNodeStackData* right) => left.Handle != right;

		public bool Equals(ImGuiTreeNodeStackDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTreeNodeStackDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTreeNodeStackDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTreeNodeFlags TreeFlags => ref Unsafe.AsRef<ImGuiTreeNodeFlags>(&Handle->TreeFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemFlags ItemFlags => ref Unsafe.AsRef<ImGuiItemFlags>(&Handle->ItemFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavRect => ref Unsafe.AsRef<ImRect>(&Handle->NavRect);
	}

}
