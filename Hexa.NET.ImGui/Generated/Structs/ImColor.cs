// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Helpers: ImVec2ImVec4 operators<br/>
	/// - It is important that we are keeping those disabled by default so they don't leak in user space.<br/>
	/// - This is in order to allow user enabling implicit cast operators between ImVec2ImVec4 and their own types (using IM_VEC2_CLASS_EXTRA in imconfig.h)<br/>
	/// - Add '#define IMGUI_DEFINE_MATH_OPERATORS' before including this file (or in imconfig.h) to access courtesy maths operators for ImVec2 and ImVec4.<br/>
	/// - We intentionally provide ImVec2*float but not float*ImVec2: this is rare enough and we want to reduce the surface for possible user mistake.<br/>
	/// Helpers macros to generate 32-bit encoded colors<br/>
	/// - User can declare their own format by #defining the 5 _SHIFT_MASK macros in their imconfig file.<br/>
	/// - Any setting other than the default will need custom backend support. The only standard backend that supports anything else than the default is DirectX9.<br/>
	/// Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)<br/>
	/// Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API.<br/>
	/// **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE.<br/>
	/// **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImColor
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector4 Value;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImColor(Vector4 value = default)
		{
			Value = value;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void HSV(float h, float s, float v, float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, a);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void HSV(float h, float s, float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.HSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void SetHSV(float h, float s, float v, float a)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, a);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void SetHSV(float h, float s, float v)
		{
			fixed (ImColor* @this = &this)
			{
				ImGui.SetHSVNative(@this, h, s, v, (float)(1.0f));
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImColorPtr : IEquatable<ImColorPtr>
	{
		public ImColorPtr(ImColor* handle) { Handle = handle; }

		public ImColor* Handle;

		public bool IsNull => Handle == null;

		public static ImColorPtr Null => new ImColorPtr(null);

		public ImColor this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImColorPtr(ImColor* handle) => new ImColorPtr(handle);

		public static implicit operator ImColor*(ImColorPtr handle) => handle.Handle;

		public static bool operator ==(ImColorPtr left, ImColorPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImColorPtr left, ImColorPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImColorPtr left, ImColor* right) => left.Handle == right;

		public static bool operator !=(ImColorPtr left, ImColor* right) => left.Handle != right;

		public bool Equals(ImColorPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImColorPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImColorPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector4 Value => ref Unsafe.AsRef<Vector4>(&Handle->Value);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void HSV(float h, float s, float v, float a)
		{
			ImGui.HSVNative(Handle, h, s, v, a);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void HSV(float h, float s, float v)
		{
			ImGui.HSVNative(Handle, h, s, v, (float)(1.0f));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void SetHSV(float h, float s, float v, float a)
		{
			ImGui.SetHSVNative(Handle, h, s, v, a);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void SetHSV(float h, float s, float v)
		{
			ImGui.SetHSVNative(Handle, h, s, v, (float)(1.0f));
		}

	}

}
