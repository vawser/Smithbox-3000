// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Main IO structure returned by BeginMultiSelect()EndMultiSelect().<br/>
	/// This mainly contains a list of selection requests.<br/>
	/// - Use 'Demo-&gt;Tools-&gt;Debug Log-&gt;Selection' to see requests as they happen.<br/>
	/// - Some fields are only useful if your list is dynamic and allows deletion (getting post-deletion focusstate right is shown in the demo)<br/>
	/// - Below: who readswrites each fields? 'r'=read, 'w'=write, 'ms'=multi-select code, 'app'=applicationuser code.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMultiSelectIO
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiSelectionRequest> Requests;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long RangeSrcItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long NavIdItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavIdSelected;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte RangeSrcReset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ItemsCount;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiMultiSelectIO(ImVector<ImGuiSelectionRequest> requests = default, long rangeSrcItem = default, long navIdItem = default, bool navIdSelected = default, bool rangeSrcReset = default, int itemsCount = default)
		{
			Requests = requests;
			RangeSrcItem = rangeSrcItem;
			NavIdItem = navIdItem;
			NavIdSelected = navIdSelected ? (byte)1 : (byte)0;
			RangeSrcReset = rangeSrcReset ? (byte)1 : (byte)0;
			ItemsCount = itemsCount;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiMultiSelectIOPtr : IEquatable<ImGuiMultiSelectIOPtr>
	{
		public ImGuiMultiSelectIOPtr(ImGuiMultiSelectIO* handle) { Handle = handle; }

		public ImGuiMultiSelectIO* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiMultiSelectIOPtr Null => new ImGuiMultiSelectIOPtr(null);

		public ImGuiMultiSelectIO this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiMultiSelectIOPtr(ImGuiMultiSelectIO* handle) => new ImGuiMultiSelectIOPtr(handle);

		public static implicit operator ImGuiMultiSelectIO*(ImGuiMultiSelectIOPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiMultiSelectIOPtr left, ImGuiMultiSelectIOPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiMultiSelectIOPtr left, ImGuiMultiSelectIOPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiMultiSelectIOPtr left, ImGuiMultiSelectIO* right) => left.Handle == right;

		public static bool operator !=(ImGuiMultiSelectIOPtr left, ImGuiMultiSelectIO* right) => left.Handle != right;

		public bool Equals(ImGuiMultiSelectIOPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiMultiSelectIOPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiMultiSelectIOPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiSelectionRequest> Requests => ref Unsafe.AsRef<ImVector<ImGuiSelectionRequest>>(&Handle->Requests);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long RangeSrcItem => ref Unsafe.AsRef<long>(&Handle->RangeSrcItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long NavIdItem => ref Unsafe.AsRef<long>(&Handle->NavIdItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavIdSelected => ref Unsafe.AsRef<bool>(&Handle->NavIdSelected);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool RangeSrcReset => ref Unsafe.AsRef<bool>(&Handle->RangeSrcReset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ItemsCount => ref Unsafe.AsRef<int>(&Handle->ItemsCount);
	}

}
