// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Optional helper to apply multi-selection requests to existing randomly accessible storage.<br/>
	/// Convenient if you want to quickly wire multi-select API on e.g. an array of bool or items storing their own selection state.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSelectionExternalStorage
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* AdapterSetItemSelected;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiSelectionExternalStorage(void* userData = default, delegate*<ImGuiSelectionExternalStorage*, int, byte, void> adapterSetItemSelected = default)
		{
			UserData = userData;
			AdapterSetItemSelected = (void*)adapterSetItemSelected;
		}


		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		public unsafe void ApplyRequests(ImGuiMultiSelectIOPtr msIo)
		{
			fixed (ImGuiSelectionExternalStorage* @this = &this)
			{
				ImGui.ApplyRequestsNative(@this, msIo);
			}
		}

		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		public unsafe void ApplyRequests(ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiSelectionExternalStorage* @this = &this)
			{
				fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
				{
					ImGui.ApplyRequestsNative(@this, (ImGuiMultiSelectIO*)pmsIo);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiSelectionExternalStorage* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiSelectionExternalStoragePtr : IEquatable<ImGuiSelectionExternalStoragePtr>
	{
		public ImGuiSelectionExternalStoragePtr(ImGuiSelectionExternalStorage* handle) { Handle = handle; }

		public ImGuiSelectionExternalStorage* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiSelectionExternalStoragePtr Null => new ImGuiSelectionExternalStoragePtr(null);

		public ImGuiSelectionExternalStorage this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiSelectionExternalStoragePtr(ImGuiSelectionExternalStorage* handle) => new ImGuiSelectionExternalStoragePtr(handle);

		public static implicit operator ImGuiSelectionExternalStorage*(ImGuiSelectionExternalStoragePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiSelectionExternalStoragePtr left, ImGuiSelectionExternalStoragePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiSelectionExternalStoragePtr left, ImGuiSelectionExternalStoragePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiSelectionExternalStoragePtr left, ImGuiSelectionExternalStorage* right) => left.Handle == right;

		public static bool operator !=(ImGuiSelectionExternalStoragePtr left, ImGuiSelectionExternalStorage* right) => left.Handle != right;

		public bool Equals(ImGuiSelectionExternalStoragePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiSelectionExternalStoragePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiSelectionExternalStoragePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* UserData { get => Handle->UserData; set => Handle->UserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* AdapterSetItemSelected { get => Handle->AdapterSetItemSelected; set => Handle->AdapterSetItemSelected = value; }
		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		public unsafe void ApplyRequests(ImGuiMultiSelectIOPtr msIo)
		{
			ImGui.ApplyRequestsNative(Handle, msIo);
		}

		/// <summary>
		/// Apply selection requests by using AdapterSetItemSelected() calls<br/>
		/// </summary>
		public unsafe void ApplyRequests(ref ImGuiMultiSelectIO msIo)
		{
			fixed (ImGuiMultiSelectIO* pmsIo = &msIo)
			{
				ImGui.ApplyRequestsNative(Handle, (ImGuiMultiSelectIO*)pmsIo);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

	}

}
