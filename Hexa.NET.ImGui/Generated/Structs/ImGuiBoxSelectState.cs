// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiBoxSelectState
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsStarting;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsStartedFromVoid;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte IsStartedSetNavIdOnce;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte RequestClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int KeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 StartPosRel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 EndPosRel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ScrollAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte UnclipMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect UnclipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect BoxSelectRectPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect BoxSelectRectCurr;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiBoxSelectState(uint id = default, bool isActive = default, bool isStarting = default, bool isStartedFromVoid = default, bool isStartedSetNavIdOnce = default, bool requestClear = default, int keyMods = default, Vector2 startPosRel = default, Vector2 endPosRel = default, Vector2 scrollAccum = default, ImGuiWindowPtr window = default, bool unclipMode = default, ImRect unclipRect = default, ImRect boxSelectRectPrev = default, ImRect boxSelectRectCurr = default)
		{
			ID = id;
			IsActive = isActive ? (byte)1 : (byte)0;
			IsStarting = isStarting ? (byte)1 : (byte)0;
			IsStartedFromVoid = isStartedFromVoid ? (byte)1 : (byte)0;
			IsStartedSetNavIdOnce = isStartedSetNavIdOnce ? (byte)1 : (byte)0;
			RequestClear = requestClear ? (byte)1 : (byte)0;
			KeyMods = keyMods;
			StartPosRel = startPosRel;
			EndPosRel = endPosRel;
			ScrollAccum = scrollAccum;
			Window = window;
			UnclipMode = unclipMode ? (byte)1 : (byte)0;
			UnclipRect = unclipRect;
			BoxSelectRectPrev = boxSelectRectPrev;
			BoxSelectRectCurr = boxSelectRectCurr;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiBoxSelectStatePtr : IEquatable<ImGuiBoxSelectStatePtr>
	{
		public ImGuiBoxSelectStatePtr(ImGuiBoxSelectState* handle) { Handle = handle; }

		public ImGuiBoxSelectState* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiBoxSelectStatePtr Null => new ImGuiBoxSelectStatePtr(null);

		public ImGuiBoxSelectState this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiBoxSelectStatePtr(ImGuiBoxSelectState* handle) => new ImGuiBoxSelectStatePtr(handle);

		public static implicit operator ImGuiBoxSelectState*(ImGuiBoxSelectStatePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiBoxSelectStatePtr left, ImGuiBoxSelectStatePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiBoxSelectStatePtr left, ImGuiBoxSelectStatePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiBoxSelectStatePtr left, ImGuiBoxSelectState* right) => left.Handle == right;

		public static bool operator !=(ImGuiBoxSelectStatePtr left, ImGuiBoxSelectState* right) => left.Handle != right;

		public bool Equals(ImGuiBoxSelectStatePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiBoxSelectStatePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiBoxSelectStatePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsActive => ref Unsafe.AsRef<bool>(&Handle->IsActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsStarting => ref Unsafe.AsRef<bool>(&Handle->IsStarting);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsStartedFromVoid => ref Unsafe.AsRef<bool>(&Handle->IsStartedFromVoid);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool IsStartedSetNavIdOnce => ref Unsafe.AsRef<bool>(&Handle->IsStartedSetNavIdOnce);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool RequestClear => ref Unsafe.AsRef<bool>(&Handle->RequestClear);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int KeyMods => ref Unsafe.AsRef<int>(&Handle->KeyMods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 StartPosRel => ref Unsafe.AsRef<Vector2>(&Handle->StartPosRel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 EndPosRel => ref Unsafe.AsRef<Vector2>(&Handle->EndPosRel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ScrollAccum => ref Unsafe.AsRef<Vector2>(&Handle->ScrollAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr Window => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->Window);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool UnclipMode => ref Unsafe.AsRef<bool>(&Handle->UnclipMode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect UnclipRect => ref Unsafe.AsRef<ImRect>(&Handle->UnclipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect BoxSelectRectPrev => ref Unsafe.AsRef<ImRect>(&Handle->BoxSelectRectPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect BoxSelectRectCurr => ref Unsafe.AsRef<ImRect>(&Handle->BoxSelectRectCurr);
	}

}
