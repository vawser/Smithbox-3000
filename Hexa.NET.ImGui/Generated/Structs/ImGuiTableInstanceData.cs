// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Per-instance data that needs preserving across frames (seemingly most others do not need to be preserved aside from debug needs. Does that means they could be moved to ImGuiTableTempData?)<br/>
	/// sizeof() ~ 24 bytes<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTableInstanceData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TableInstanceID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastOuterHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastTopHeadersRowHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastFrozenHeight;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int HoveredRowLast;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int HoveredRowNext;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTableInstanceData(uint tableInstanceId = default, float lastOuterHeight = default, float lastTopHeadersRowHeight = default, float lastFrozenHeight = default, int hoveredRowLast = default, int hoveredRowNext = default)
		{
			TableInstanceID = tableInstanceId;
			LastOuterHeight = lastOuterHeight;
			LastTopHeadersRowHeight = lastTopHeadersRowHeight;
			LastFrozenHeight = lastFrozenHeight;
			HoveredRowLast = hoveredRowLast;
			HoveredRowNext = hoveredRowNext;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTableInstanceDataPtr : IEquatable<ImGuiTableInstanceDataPtr>
	{
		public ImGuiTableInstanceDataPtr(ImGuiTableInstanceData* handle) { Handle = handle; }

		public ImGuiTableInstanceData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTableInstanceDataPtr Null => new ImGuiTableInstanceDataPtr(null);

		public ImGuiTableInstanceData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTableInstanceDataPtr(ImGuiTableInstanceData* handle) => new ImGuiTableInstanceDataPtr(handle);

		public static implicit operator ImGuiTableInstanceData*(ImGuiTableInstanceDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTableInstanceDataPtr left, ImGuiTableInstanceDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTableInstanceDataPtr left, ImGuiTableInstanceDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTableInstanceDataPtr left, ImGuiTableInstanceData* right) => left.Handle == right;

		public static bool operator !=(ImGuiTableInstanceDataPtr left, ImGuiTableInstanceData* right) => left.Handle != right;

		public bool Equals(ImGuiTableInstanceDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTableInstanceDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTableInstanceDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint TableInstanceID => ref Unsafe.AsRef<uint>(&Handle->TableInstanceID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastOuterHeight => ref Unsafe.AsRef<float>(&Handle->LastOuterHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastTopHeadersRowHeight => ref Unsafe.AsRef<float>(&Handle->LastTopHeadersRowHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastFrozenHeight => ref Unsafe.AsRef<float>(&Handle->LastFrozenHeight);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int HoveredRowLast => ref Unsafe.AsRef<int>(&Handle->HoveredRowLast);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int HoveredRowNext => ref Unsafe.AsRef<int>(&Handle->HoveredRowNext);
	}

}
