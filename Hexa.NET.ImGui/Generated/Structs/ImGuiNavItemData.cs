// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Storage for navigation queryresults<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiNavItemData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint FocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect RectRel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemFlags ItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DistBox;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DistCenter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DistAxial;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long SelectionUserData;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiNavItemData(ImGuiWindowPtr window = default, uint id = default, uint focusScopeId = default, ImRect rectRel = default, ImGuiItemFlags itemFlags = default, float distBox = default, float distCenter = default, float distAxial = default, long selectionUserData = default)
		{
			Window = window;
			ID = id;
			FocusScopeId = focusScopeId;
			RectRel = rectRel;
			ItemFlags = itemFlags;
			DistBox = distBox;
			DistCenter = distCenter;
			DistAxial = distAxial;
			SelectionUserData = selectionUserData;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiNavItemDataPtr : IEquatable<ImGuiNavItemDataPtr>
	{
		public ImGuiNavItemDataPtr(ImGuiNavItemData* handle) { Handle = handle; }

		public ImGuiNavItemData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiNavItemDataPtr Null => new ImGuiNavItemDataPtr(null);

		public ImGuiNavItemData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiNavItemDataPtr(ImGuiNavItemData* handle) => new ImGuiNavItemDataPtr(handle);

		public static implicit operator ImGuiNavItemData*(ImGuiNavItemDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiNavItemDataPtr left, ImGuiNavItemDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiNavItemDataPtr left, ImGuiNavItemDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiNavItemDataPtr left, ImGuiNavItemData* right) => left.Handle == right;

		public static bool operator !=(ImGuiNavItemDataPtr left, ImGuiNavItemData* right) => left.Handle != right;

		public bool Equals(ImGuiNavItemDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiNavItemDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiNavItemDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr Window => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->Window);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint FocusScopeId => ref Unsafe.AsRef<uint>(&Handle->FocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect RectRel => ref Unsafe.AsRef<ImRect>(&Handle->RectRel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemFlags ItemFlags => ref Unsafe.AsRef<ImGuiItemFlags>(&Handle->ItemFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DistBox => ref Unsafe.AsRef<float>(&Handle->DistBox);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DistCenter => ref Unsafe.AsRef<float>(&Handle->DistCenter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DistAxial => ref Unsafe.AsRef<float>(&Handle->DistAxial);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long SelectionUserData => ref Unsafe.AsRef<long>(&Handle->SelectionUserData);
	}

}
