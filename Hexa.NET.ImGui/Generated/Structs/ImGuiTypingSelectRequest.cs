// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Returned by GetTypingSelectRequest(), designed to eventually be public.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTypingSelectRequest
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTypingSelectFlags Flags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int SearchBufferLen;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* SearchBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SelectRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SingleCharMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SingleCharSize;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTypingSelectRequest(ImGuiTypingSelectFlags flags = default, int searchBufferLen = default, byte* searchBuffer = default, bool selectRequest = default, bool singleCharMode = default, byte singleCharSize = default)
		{
			Flags = flags;
			SearchBufferLen = searchBufferLen;
			SearchBuffer = searchBuffer;
			SelectRequest = selectRequest ? (byte)1 : (byte)0;
			SingleCharMode = singleCharMode ? (byte)1 : (byte)0;
			SingleCharSize = singleCharSize;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTypingSelectRequestPtr : IEquatable<ImGuiTypingSelectRequestPtr>
	{
		public ImGuiTypingSelectRequestPtr(ImGuiTypingSelectRequest* handle) { Handle = handle; }

		public ImGuiTypingSelectRequest* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTypingSelectRequestPtr Null => new ImGuiTypingSelectRequestPtr(null);

		public ImGuiTypingSelectRequest this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTypingSelectRequestPtr(ImGuiTypingSelectRequest* handle) => new ImGuiTypingSelectRequestPtr(handle);

		public static implicit operator ImGuiTypingSelectRequest*(ImGuiTypingSelectRequestPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTypingSelectRequestPtr left, ImGuiTypingSelectRequestPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTypingSelectRequestPtr left, ImGuiTypingSelectRequestPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTypingSelectRequestPtr left, ImGuiTypingSelectRequest* right) => left.Handle == right;

		public static bool operator !=(ImGuiTypingSelectRequestPtr left, ImGuiTypingSelectRequest* right) => left.Handle != right;

		public bool Equals(ImGuiTypingSelectRequestPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTypingSelectRequestPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTypingSelectRequestPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTypingSelectFlags Flags => ref Unsafe.AsRef<ImGuiTypingSelectFlags>(&Handle->Flags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int SearchBufferLen => ref Unsafe.AsRef<int>(&Handle->SearchBufferLen);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* SearchBuffer { get => Handle->SearchBuffer; set => Handle->SearchBuffer = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SelectRequest => ref Unsafe.AsRef<bool>(&Handle->SelectRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SingleCharMode => ref Unsafe.AsRef<bool>(&Handle->SingleCharMode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte SingleCharSize => ref Unsafe.AsRef<byte>(&Handle->SingleCharSize);
	}

}
