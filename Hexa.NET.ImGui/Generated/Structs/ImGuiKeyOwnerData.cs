// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// This extends ImGuiKeyData but only for named keys (legacy keys don't support the new features)<br/>
	/// Stored in main context (1 per named key). In the future it might be merged into ImGuiKeyData.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyOwnerData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint OwnerCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint OwnerNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LockThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LockUntilRelease;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiKeyOwnerData(uint ownerCurr = default, uint ownerNext = default, bool lockThisFrame = default, bool lockUntilRelease = default)
		{
			OwnerCurr = ownerCurr;
			OwnerNext = ownerNext;
			LockThisFrame = lockThisFrame ? (byte)1 : (byte)0;
			LockUntilRelease = lockUntilRelease ? (byte)1 : (byte)0;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiKeyOwnerDataPtr : IEquatable<ImGuiKeyOwnerDataPtr>
	{
		public ImGuiKeyOwnerDataPtr(ImGuiKeyOwnerData* handle) { Handle = handle; }

		public ImGuiKeyOwnerData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiKeyOwnerDataPtr Null => new ImGuiKeyOwnerDataPtr(null);

		public ImGuiKeyOwnerData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiKeyOwnerDataPtr(ImGuiKeyOwnerData* handle) => new ImGuiKeyOwnerDataPtr(handle);

		public static implicit operator ImGuiKeyOwnerData*(ImGuiKeyOwnerDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiKeyOwnerDataPtr left, ImGuiKeyOwnerDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiKeyOwnerDataPtr left, ImGuiKeyOwnerDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiKeyOwnerDataPtr left, ImGuiKeyOwnerData* right) => left.Handle == right;

		public static bool operator !=(ImGuiKeyOwnerDataPtr left, ImGuiKeyOwnerData* right) => left.Handle != right;

		public bool Equals(ImGuiKeyOwnerDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiKeyOwnerDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiKeyOwnerDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint OwnerCurr => ref Unsafe.AsRef<uint>(&Handle->OwnerCurr);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint OwnerNext => ref Unsafe.AsRef<uint>(&Handle->OwnerNext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LockThisFrame => ref Unsafe.AsRef<bool>(&Handle->LockThisFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LockUntilRelease => ref Unsafe.AsRef<bool>(&Handle->LockUntilRelease);
	}

}
