// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiLocEntry
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLocKey Key;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* Text;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiLocEntry(ImGuiLocKey key = default, byte* text = default)
		{
			Key = key;
			Text = text;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiLocEntryPtr : IEquatable<ImGuiLocEntryPtr>
	{
		public ImGuiLocEntryPtr(ImGuiLocEntry* handle) { Handle = handle; }

		public ImGuiLocEntry* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiLocEntryPtr Null => new ImGuiLocEntryPtr(null);

		public ImGuiLocEntry this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiLocEntryPtr(ImGuiLocEntry* handle) => new ImGuiLocEntryPtr(handle);

		public static implicit operator ImGuiLocEntry*(ImGuiLocEntryPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiLocEntryPtr left, ImGuiLocEntryPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiLocEntryPtr left, ImGuiLocEntryPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiLocEntryPtr left, ImGuiLocEntry* right) => left.Handle == right;

		public static bool operator !=(ImGuiLocEntryPtr left, ImGuiLocEntry* right) => left.Handle != right;

		public bool Equals(ImGuiLocEntryPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiLocEntryPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiLocEntryPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiLocKey Key => ref Unsafe.AsRef<ImGuiLocKey>(&Handle->Key);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* Text { get => Handle->Text; set => Handle->Text = value; }
	}

}
