// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Persistent storage for multi-select (as long as selection is alive)<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiMultiSelectState
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* Window;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastFrameActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastSelectionSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte RangeSelected;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavIdSelected;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long RangeSrcItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long NavIdItem;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiMultiSelectState(ImGuiWindowPtr window = default, uint id = default, int lastFrameActive = default, int lastSelectionSize = default, byte rangeSelected = default, byte navIdSelected = default, long rangeSrcItem = default, long navIdItem = default)
		{
			Window = window;
			ID = id;
			LastFrameActive = lastFrameActive;
			LastSelectionSize = lastSelectionSize;
			RangeSelected = rangeSelected;
			NavIdSelected = navIdSelected;
			RangeSrcItem = rangeSrcItem;
			NavIdItem = navIdItem;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiMultiSelectStatePtr : IEquatable<ImGuiMultiSelectStatePtr>
	{
		public ImGuiMultiSelectStatePtr(ImGuiMultiSelectState* handle) { Handle = handle; }

		public ImGuiMultiSelectState* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiMultiSelectStatePtr Null => new ImGuiMultiSelectStatePtr(null);

		public ImGuiMultiSelectState this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiMultiSelectStatePtr(ImGuiMultiSelectState* handle) => new ImGuiMultiSelectStatePtr(handle);

		public static implicit operator ImGuiMultiSelectState*(ImGuiMultiSelectStatePtr handle) => handle.Handle;

		public static bool operator ==(ImGuiMultiSelectStatePtr left, ImGuiMultiSelectStatePtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiMultiSelectStatePtr left, ImGuiMultiSelectStatePtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiMultiSelectStatePtr left, ImGuiMultiSelectState* right) => left.Handle == right;

		public static bool operator !=(ImGuiMultiSelectStatePtr left, ImGuiMultiSelectState* right) => left.Handle != right;

		public bool Equals(ImGuiMultiSelectStatePtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiMultiSelectStatePtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiMultiSelectStatePtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr Window => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->Window);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastFrameActive => ref Unsafe.AsRef<int>(&Handle->LastFrameActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastSelectionSize => ref Unsafe.AsRef<int>(&Handle->LastSelectionSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte RangeSelected => ref Unsafe.AsRef<byte>(&Handle->RangeSelected);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte NavIdSelected => ref Unsafe.AsRef<byte>(&Handle->NavIdSelected);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long RangeSrcItem => ref Unsafe.AsRef<long>(&Handle->RangeSrcItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long NavIdItem => ref Unsafe.AsRef<long>(&Handle->NavIdItem);
	}

}
