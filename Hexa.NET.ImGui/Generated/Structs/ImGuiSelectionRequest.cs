// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Selection request item<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiSelectionRequest
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiSelectionRequestType Type;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Selected;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte RangeDirection;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long RangeFirstItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long RangeLastItem;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiSelectionRequest(ImGuiSelectionRequestType type = default, bool selected = default, byte rangeDirection = default, long rangeFirstItem = default, long rangeLastItem = default)
		{
			Type = type;
			Selected = selected ? (byte)1 : (byte)0;
			RangeDirection = rangeDirection;
			RangeFirstItem = rangeFirstItem;
			RangeLastItem = rangeLastItem;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiSelectionRequestPtr : IEquatable<ImGuiSelectionRequestPtr>
	{
		public ImGuiSelectionRequestPtr(ImGuiSelectionRequest* handle) { Handle = handle; }

		public ImGuiSelectionRequest* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiSelectionRequestPtr Null => new ImGuiSelectionRequestPtr(null);

		public ImGuiSelectionRequest this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiSelectionRequestPtr(ImGuiSelectionRequest* handle) => new ImGuiSelectionRequestPtr(handle);

		public static implicit operator ImGuiSelectionRequest*(ImGuiSelectionRequestPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiSelectionRequestPtr left, ImGuiSelectionRequestPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiSelectionRequestPtr left, ImGuiSelectionRequestPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiSelectionRequestPtr left, ImGuiSelectionRequest* right) => left.Handle == right;

		public static bool operator !=(ImGuiSelectionRequestPtr left, ImGuiSelectionRequest* right) => left.Handle != right;

		public bool Equals(ImGuiSelectionRequestPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiSelectionRequestPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiSelectionRequestPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiSelectionRequestType Type => ref Unsafe.AsRef<ImGuiSelectionRequestType>(&Handle->Type);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Selected => ref Unsafe.AsRef<bool>(&Handle->Selected);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte RangeDirection => ref Unsafe.AsRef<byte>(&Handle->RangeDirection);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long RangeFirstItem => ref Unsafe.AsRef<long>(&Handle->RangeFirstItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long RangeLastItem => ref Unsafe.AsRef<long>(&Handle->RangeLastItem);
	}

}
